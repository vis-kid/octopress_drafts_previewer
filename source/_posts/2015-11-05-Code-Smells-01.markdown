---
layout: post
title: Ruby / Rails Code Smells 01
date: 2015-11-05 04:29:10 +0100
comments: true
sharing: true
published: true 
categories: [Ruby, Rails, thoughtbot, TDD, BDD, Test-Driven-Design, RSpec, Factory Girl]
---

{% img /images/code_smells/code_smell_01.jpeg %}

### Topics

+ Smelly Code
+ Large Class / God Class
+ Long Method

+ ### Smelly Code

The following short series of articles is meant for a bit more experienced Ruby developers and starters as well. I had the impression that code smells and their refactorings can be very daunting and intimidating to newbies—especially if they are not in the fortunate position to have mentors who turn can mystical programming concepts into shining light bulbs.

So what are we talking about exactly when people mention code smells? Is it always a problem in your code? Not necessarily! Can you avoid them completely? I don’t think so! Do you mean code smells are broken code? Well, sometimes and sometimes not. Should it be my priority to fix them right away? Same answer I fear, sometimes yes and sometimes you certainly should fry bigger fish first. Are you insane? Fair question at this point! Before you continue diving into this whole smelly business, remember to take away one thing from all of this: Don’t try to fix every smell you encounter—this is most certainly a waste of your time!

It seems to me that code smells are a bit hard to wrap up in a nicely labeled box. There are all kinds of smells with various different options to address them. I imagine also that different programming languages and framework are prone to different kind of smells—but there are definitely a lot of common “genetic” strains among them. My attempt to describe code smells is to compare them with medical symptoms that tell you that you might have a problem. They can point to all sorts of possible problems and have a wide variety of solutions if proven to be in need of treatment. 

Thankfully its not as complicated as dealing with the human body—and psyche of course. Its a fair example though because some of these symptoms need to be treated right away and some others give you ample time to come up with a solution that is best for the patient’s overall well-being. If you have working code and you run into something smelly you’ll have to make the hard decision if its worth the time to find a fix and if that refactoring improves the stability of your app. That being said, if you stumble upon code which you can improve right away its good advice to leave the code better than what you’d found—even a tiny bit better adds up substantially over time.

#### Resistance

If the quality of your code makes the inclusion of new code harder—like deciding where to put new code is a pain or comes with a lot of ripple effects throughout your codebase for example—you’ll experience resistance from your existing code. As a guideline for code quality you can measure it always by how easy it is to introduce changes. If that is getting harder and harder its definitely time to refactor and to take the last part of *red-green-REFACTOR* more seriously.

+ ### Large Class / God Class

Let’s start with something fancy sounding—“God classes”—because I think they are particular easy to grasp for beginners. God classes are a special case of a code smell called **Large Class**. In this section I’ll address both of them. If you have spent a little bit of time in Rails land you probably have seen them so often that they look normal to you. 

You surely remember the “fat models, skinny controller” mantra? Well actually, skinny is good for all these classes but as a guideline its good advice for newbies I suppose. God classes are objects that attract all sorts of knowledge and behaviour like a black hole. Your usual suspects most often include the User model and whatever problem (hopefully ;) your app is trying to solve—first and foremost at least. A todo app might bulk up on the **Todos** model, a shopping app on **Products**, a photo app on **Photos**—you get the drift. People call these god classes because they know too much. They have too many connections with other classes—mostly because someone was lazy modeling them. It is hard work though to keep God classes in check. They make it really easy to dump more responsibilities on them and it takes skill to divide and conquer them.

The problem with them is that they become harder and harder to understand—especially for new team members—harder to change and reuse becomes less and less of an option the more gravity they amassed. Oh yeah, you’re right, your tests are unnecessarily harder to write as well. In short, there is not really an upside to having large classes and god classes in particular.

There are a couple of common symptoms / signs that your class needs some surgery:

+ You need to scroll!
+ Tons of private methods?
+ Does your class have seven or more methods on it?
+ Hard to tell what your class really does—concisely!
+ Does your class have many reasons to change when your code evolves?

Also, if you squint at your class and think “Eh? Ew!” you might be on to something too. If all that sounds familiar, chances are good that you found yourself a fine specimen. 

``` ruby
class CastingInviter
  EMAIL_REGEX = /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/

  attr_reader :message, :invitees, :casting

  def initialize(attributes = {})
    @message  = attributes[:message]  || ''
    @invitees = attributes[:invitees] || ''
    @sender   = attributes[:sender]
    @casting  = attributes[:casting]
  end

  def valid?
    valid_message? && valid_invitees?
  end

  def deliver
    if valid?
      invitee_list.each do |email|
        invitation = create_invitation(email)
        Mailer.invitation_notification(invitation, @message)
      end
    else
      failure_message  = "Your #{ @casting } message couldn’t be sent. Invitees emails or message are invalid"
      invitation = create_invitation(@sender)
      Mailer.invitation_notification(invitation, failure_message )
    end
  end

  private

  def invalid_invitees
    @invalid_invitees ||= invitee_list.map do |item|
      unless item.match(EMAIL_REGEX)
        item
      end
    end.compact
  end

  def invitee_list
    @invitee_list ||= @invitees.gsub(/\s+/, '').split(/[\n,;]+/)
  end

  def valid_message?
    @message.present?
  end

  def valid_invitees?
    invalid_invitees.empty?
  end

  def create_invitation(email)
    Invitation.create(
      casting:       @casting,
      sender:        @sender,
      invitee_email: email,
      status:        'pending'
    )
  end
end
```

Can you see how much nastyness is bundled in here? Of course I put a little cherry on top, but you will run into code like this sooner or later.  Let’s think about what responsibilities this **CastingInviter** class has to juggle. 

+ Delivering email
+ Checking for valid messages and email addresses
+ Getting rid of white space
+ Splitting email addresses on commas and semicolons

Should all of this be dumped on a class which just wants to deliver a casting call via **deliver**? Certainly not! CastingInviter doesn’t need to know most of these details. That’s more the responsibility of some class that is specialized in dealing with email related stuff. You’ll find many reasons to change your code as well. If your method of invitation changes you can expect to run into some [Shotgun surgery](https://en.wikipedia.org/wiki/Shotgun_surgery). 

So how should we deal with this. Often, extracting a class will present itself as a reasonable solution to such problems. Once you find enough coherent meat that seems to belong into a specialized object of its own you can extract that functionality into a new class.

You create a new class and gradually move the functionality over—one by one. Move each method separately and rename them if you see the reason to. Then reference the new class in the orignal one and delegate the needed functionality. Good thing you have test coverage (hopefull!) that lets you check if things still work properly. Its easier to see how its done in action so lets read some code:

``` ruby
class CastingInviter

  attr_reader :message, :invitees, :casting

  def initialize(attributes = {})
   @message  = attributes[:message]  || ''
   @invitees = attributes[:invitees] || ''
   @casting  = attributes[:casting]
   @sender   = attributes[:sender]
 end

  def valid?
    casting_email_handler.valid?
  end

  def deliver
    casting_email_handler.deliver
  end

  private

  def casting_email_handler
    @casting_email_handler = CastingEmailHandler.new(
      message:  message, 
      invitees: invitees, 
      casting:  casting, 
      sender:   @sender)
  end
end
```

``` ruby
class CastingEmailHandler 
  EMAIL_REGEX = /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/

  def initialize(attr = {})
    @message  = attr[:message]  || ''
    @invitees = attr[:invitees] || ''
    @casting  = attr[:casting]
    @sender   = attr[:sender]
  end

  def valid?
    valid_message? && valid_invitees?
  end

  def deliver
    if valid?
      invitee_list.each do |email|
        invitation = create_invitation(email)
        Mailer.invitation_notification(invitation, @message)
      end
    else
      failure_message  = "Your #{ @casting } message couldn’t be sent. Invitees emails or message are invalid"
      invitation = create_invitation(@sender)
      Mailer.invitation_notification(invitation, failure_message )
    end
  end

   private

   def invalid_invitees
    @invalid_invitees ||= invitee_list.map do |item|
      unless item.match(EMAIL_REGEX)
        item
      end
    end.compact
  end

  def invitee_list
    @invitee_list ||= @invitees.gsub(/\s+/, '').split(/[\n,;]+/)
  end

  def valid_invitees?
    invalid_invitees.empty?
  end

  def valid_message?
    @message.present?
  end

  def create_invitation(email)
    Invitation.create(
      casting:       @casting,
      sender:        @sender,
      invitee_email: email,
      status:        'pending'
    )
  end
end
```

In this solution, you’ll not only see how this separation of concerns affects your code quality, it also reads a lot better and becomes easier to digest. Here we delegate methods to a new class that is specialized to deal with delivering these invitations via email. You have one dedicated place that checks if the messages and invitees are valid and how they need to be delivered. **CastingInviter** doesn’t need to know anything about these details so we delegate these responsibilities to a new class **CastingEmailHandler**.

The knowledge of how to deliver and check for validity of these casting invitation emails is now all contained in our new extracted class. Do we have more code now? You bet! Was it worth it to separate concerns? Pretty sure! Can we go beyond that and refactor **CastingEmailHandler** some more? Absolutely! Knock yourself out!

In case you’re wondering about the **valid?** method on **CastingEmailHandler** and **CastingInviter**. This one is for RSpec to create a custom matcher. This lets me write something like

``` ruby
expect(casting_inviter).to be_valid
```

Pretty handy I think.


{% img /images/code_smells/code_smell_01.jpeg %}

 —I’m not taking about a facial or a nose job but a less cosmetic procedure like a Gastric Bypass which makes you restrict the amount of food you can eat.
