---
layout: post
title: Ruby / Rails Code Smells 02
date: 2015-11-13 04:29:10 +0100
comments: true
sharing: true
published: true 
categories: [Ruby, Rails, thoughtbot, TDD, BDD, Test-Driven-Design, RSpec, Factory Girl]
---

{% img /images/code_smells/code_smell_01_600_mirrored.jpg %}

### Topics

+ Feature Envy
+ Shotgun Surgery


What you’ll quickly realize with code smells is that some of them are very close cousins, even their refactorings are sometimes related—like **Inline Class** and **Extract Class** are not that very different. With inlining a class you extract the whole class and get rid of the original one—well, been there, done that. Haven’t we? More on that in a later piece though. The point I’m trying to make is that you shouldn’t feel overwhelmed with the number of smells, refactorings and certainly not by their clever naming scheme. Things like **Shotgun Surgery**, **Feature Envy**, **Divergent Change** might sound fancy and intimidating to people new to code. Maybe I’m wrong of course.

If you get into the topic and played with a couple of refactorings for code smells yourself you’ll quickly see that they often end up in the same alley and are simply different strategies to get there. Having classes that are concise, well organized and focused on a small amount of responsibilites. I think its fair to say that if you can achieve that you’ll be ahead of the pack most of the time—not that being ahead of others is so important but its simply often missing in code from people before they’re considered “experts”. So why not get into the game early and build a concrete foundation for designing your code. Don’t believe your possibly own narrative that this is an advanced topic that you should maybe put off for a while until you’re ready. Even if you’re a newbie, if you take small steps you can make sense of smells and their refactorings a lot earlier than you think.   

Before we dive into the mechanics, I wanna repeat an important point from the first article. Not every smell is inherently bad and not every refactoring is always worth it. You gotta decide on the spot when you have all the relevant information at your disposal if your code is more stable after and if its worth your time to fix the smell.

+ ### Feature Envy

Let’s revisit an example from the previous article. We extracted a long list of parameters for **#assign_new_mission** into a *parameter object* via the **Mission** class. So far so cool.

**M with feature envy**

``` ruby
class M
  def assign_new_mission(mission)
    print "Mission #{mission.mission_name} has been assigned to #{mission.agent_name} with the objective to #{mission.objective}."
    if mission.licence_to_kill
      print " The licence to kill has been granted."
    else
      print " The licence to kill has not been granted."
    end
  end
end

class Mission
  attr_reader :mission_name, :agent_name, :objective, :licence_to_kill

  def initialize(mission_name: mission_name, agent_name: agent_name, objective: objective, licence_to_kill: licence_to_kill)
    @mission_name    = mission_name
    @agent_name      = agent_name
    @objective       = objective
    @licence_to_kill = licence_to_kill
  end
end

m = M.new

mission = Mission.new(mission_name: 'Octopussy', agent_name: 'James Bond', objective: 'find the nuclear device', licence_to_kill: true)

m.assign_new_mission(mission)

# => "Mission Octopussy has been assigned to James Bond with the objective to find the nuclear device. The licence to kill has been granted."

```

I briefly mentioned why we can simplyfy the **M** class even more by moving the method to **assign_new_mission**(s) to the new class for the parameter object. What I didn’t address was the fact that **M** had an easily curable form of *feature envy* as well. She was way too nosy about the missions attributes. Its not only a bad case of micromanagement but also a very common code smell.

Let me show you what I mean. In **M#assign_new_mission**, **M** is “envious” about the data in the new parameter object and wants to access it all over the place. 

+ **mission.mission_name**
+ **mission.agent_name**
+ **mission.objective**
+ **mission.licence_to_kill**

Additionally to that you also have a parameter object **Mission** that is only responsible for data right now—which is another smell.

This whole situation tells you basically that **#assign_new_mission** wants to be somewhere else and **M** doesn’t need to know the details of how missions get assigned. After all, why wouldn’t it be a missions’ responsibility to assign new missions? Remember to always to put things together that also change together.

**M without feature envy**

``` ruby
class M
  def assign_new_mission(mission)
    mission.assign
  end
end

class Mission
  attr_reader :mission_name, :agent_name, :objective, :licence_to_kill

  def initialize(mission_name: mission_name, agent_name: agent_name, objective: objective, licence_to_kill: licence_to_kill)
    @mission_name    = mission_name
    @agent_name      = agent_name
    @objective       = objective
    @licence_to_kill = licence_to_kill
  end

  def assign
    print "Mission #{mission_name} has been assigned to #{agent_name} with the objective to #{objective}."
    if licence_to_kill
      print " The licence to kill has been granted."
    else
      print " The licence to kill has not been granted."
    end
  end
end

m = M.new
mission = Mission.new(mission_name: 'Octopussy', agent_name: 'James Bond', objective: 'find the nuclear device', licence_to_kill: true)
m.assign_new_mission(mission)

```

As you can see, we simplified things quite a bit. The method slimmed down significantly and delegates the behaviour to the object in charge. **M** does not request missions data specifics anymore and certainly stays away from getting involved in how printing assigments are done. Now she can focus on her real job and doesn’t need to be disturbed if any details of mission assignments change. More time for mind games and hunting down rogue agents. Win-win!

This smell breads entanglement—by that I don’t mean the good kind, the one that let’s information travel faster than light spookingly—I’m talking about the one that over time might let your development momentum grind to an every more approaching halt. Not good! Bad entanglement! Why so? Ripple effects throughout your code! A change in one place butterflies through all kinds of stuff and you end up as a kite in a hurricane. (Ok, a bit overly dramatic, but I give myself a B+ for the Bond reference in there.) 

As a general antidote for feature envy, you wanna aim for designing classes that are concerned mostly about their own stuff and have—if possible—single responsibilities. In short, classes should be something like friendly otakus. They keep their business to themselves, are too busy managing their own collections of vital pop-cultural achievemtens and therefore have no time for too many friends or extracurricular stuff. Socially that might not be the healthiest of behaviours but for designing classes it often is a reasonable guidelineto keep your momentum where it should be—moving forward!

+ ### Shotgun Surgery

A little bit silly the naming isn’t? But at the same time its a pretty accurate description and funny too—definitely with a touch of nerdiness. Sounds like serious business though. It is! But luckily its not that hard to grasp. None the less its one of the nastier code smells. Why? Because it breeds dupliction like no other and its easy to loose sight of all the changes you’d need to make to fix things. What happens is you make a change in one class / file and you need to touch many other classes / files as well. 

For example, if you’re in a situation where you think you can get away with one little change in one place and then realize that you have to wade through a whole bunch of files to make either the same change or fix something else that is broken because of it. NOT good, not at all! That sounds more like a good reason why people start to hate the code they’re dealing with. If you have a spectrum with DRY code on one side then code that needs often shotgun surgery is pretty much on the opposite end. Don’t be lazy and let yourself go there. I’m sure you’d rather open one file and apply your changes there. That’s the kind of lazy you should strive for!

To avoid this smell here’s a short list you can look out for right away:

+ Code Duplication
+ Long Parameter List
+ Feature Envy
+ Coupling

What do we mean when we talk about code that is coupled. Let’s say we have objects **A** and **B**. If they are not coupled then you can change one of them without affecting the other. Otherwise you’ll more often than not also have to deal with the other object as well. This is a problem and shotgun surgery is a symptom for tight coupling as well. So worry about how easy you can change your code—ALWAYS!—because that also means that your level of coupling is acceptably low. Having said that, I realize that your expectations would be  undrealistic if you want to avoid it all the time at all costs. That’s not gonna happen! You will find good reasons like replacing conditionals with *Polymorphism*. In such a case, a litle bit of coupling, shotgun surgery and keeping the API of objects in sync is well worth getting rid of a ton of case statements via a **Null Object** for example.(More on that in a later piece)  

Most commonly you can apply one of the following refactorings to heal the wounds:

+ Move Method
+ Move Field
+ Extract Class
+ Inline Class

``` ruby
class Spectre
  STANDARD_AMOUNT = 10000000
  BONUS_AMOUNT    = 10000000

  def charge_for_initializing_operation
    evil_client_id = PaymentGem.find(email).client_id
    PaymentGem.charge(evil_client_id, STANDARD_AMOUNT)
  end

  def charge_for_successful_operation
    evil_client_id = PaymentGem.find(email).client_id
    PaymentGem.charge(evil_client_id, BONUS_AMOUNT)
  end

  def accept_new_customer(email)
    PaymentGem.create_customer(email)
  end
end

class Refund
  def process!
    transaction_id = PaymentGem.find_transaction(order.client_id)
    PaymentGem.refund(transaction_id, amount)
  end
end 

class Bonus

  BONUS_AMOUNT    = 1000000
  STANDARD_AMOUNT = 200000

  def process!
    if operation.enemy_agent == 'James Bond' && operation.enemy_agent_status == 'Killed in action'
      spectre_agent_id = PaymentGem.find(email).agent_id
      PaymentGem.transfer_funds(spectre_agent_id, BONUS_AMOUNT)
    else
      PaymentGem.transfer_funds(spectre_agent_id, STANDARD_AMOUNT)
    end
  end
end
```
