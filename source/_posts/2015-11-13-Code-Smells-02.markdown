---
layout: post
title: Ruby / Rails Code Smells 02
date: 2015-11-13 04:29:10 +0100
comments: true
sharing: true
published: true 
categories: [Ruby, Rails, thoughtbot, TDD, BDD, Test-Driven-Design, RSpec, Factory Girl]
---

{% img /images/code_smells/code_smell_01_600_mirrored.jpg %}

### Topics

+ Feature Envy
+ Shotgun Surgery
+ Divergent Change


What you’ll quickly realize with code smells is that some of them are very close cousins, even their refactorings are sometimes related—like **Inline Class** and **Extract Class** are not that very different. With inlining a class for example, you extract the whole class while you get rid of the original one. So kinda extract class with a little twist. The point I’m trying to make is that you shouldn’t feel overwhelmed with the number of smells, refactorings and certainly not get discouraged by their clever names. Things like **Shotgun Surgery**, **Feature Envy**, **Divergent Change** might sound fancy and intimidating to people who just got started. Maybe I’m wrong of course.

If you dive a little into this whole topic and play with a couple of refactorings for code smells yourself you’ll quickly see that they often end up in the same ball park. A lot of refactorings are simply different strategies to get to a point where you have classes that are concise, well organized and focused on a small amount of responsibilites. I think its fair to say that if you can achieve that you’ll be ahead of the pack most of the time—not that being ahead of others is so important but such class design is simply often missing in code from people before they’re considered “experts”. So why not get into the game early and build a concrete foundation for designing your code. Don’t believe your possibly own narrative that this is an advanced topic that you should maybe put off for a while until you’re ready. Even if you’re a newbie, if you take small steps you can wrap your head around smells and their refactorings a lot earlier than you might think.

Before we dive into the mechanics, I wanna repeat an important point from the first article. Not every smell is inherently bad and not every refactoring is always worth it. You gotta decide on the spot—when you have all the relevant information at your disposal—if your code is more stable after a refactoring and if its worth your time to fix the smell.

+ ### Feature Envy

Let’s revisit an example from the previous article. We extracted a long list of parameters for **#assign_new_mission** into a *parameter object* via the **Mission** class. So far so cool.

**M with feature envy**

``` ruby
class M
  def assign_new_mission(mission)
    print "Mission #{mission.mission_name} has been assigned to #{mission.agent_name} with the objective to #{mission.objective}."
    if mission.licence_to_kill
      print " The licence to kill has been granted."
    else
      print " The licence to kill has not been granted."
    end
  end
end

class Mission
  attr_reader :mission_name, :agent_name, :objective, :licence_to_kill

  def initialize(mission_name: mission_name, agent_name: agent_name, objective: objective, licence_to_kill: licence_to_kill)
    @mission_name    = mission_name
    @agent_name      = agent_name
    @objective       = objective
    @licence_to_kill = licence_to_kill
  end
end

m = M.new

mission = Mission.new(mission_name: 'Octopussy', agent_name: 'James Bond', objective: 'find the nuclear device', licence_to_kill: true)

m.assign_new_mission(mission)

# => "Mission Octopussy has been assigned to James Bond with the objective to find the nuclear device. The licence to kill has been granted."

```

I briefly mentioned how we can simplyfy the **M** class even more by moving the method **#assign_new_mission** to the new class for the parameter object. What I didn’t address was the fact that **M** had an easily curable form of *feature envy* as well. **M** was way too nosy about attributes of **Mission**. Put differently, she asked way to many “questions” about the mission object. Its not only a bad case of micromanagement but also a very common code smell.

Let me show you what I mean. In **M#assign_new_mission**, **M** is “envious” about the data in the new parameter object and wants to access it all over the place. 

+ **mission.mission_name**
+ **mission.agent_name**
+ **mission.objective**
+ **mission.licence_to_kill**

In addition to that, you also have a parameter object **Mission** that is only responsible for data right now—which is another smell, a *Data Class*.

This whole situation tells you basically that **#assign_new_mission** wants to be somewhere else and **M** doesn’t need to know the details of how missions get assigned. After all, why wouldn’t it be a missions’ responsibility to assign new missions? Remember to always to put things together that also change together.

**M without feature envy**

``` ruby
class M
  def assign_new_mission(mission)
    mission.assign
  end
end

class Mission
  attr_reader :mission_name, :agent_name, :objective, :licence_to_kill

  def initialize(mission_name: mission_name, agent_name: agent_name, objective: objective, licence_to_kill: licence_to_kill)
    @mission_name    = mission_name
    @agent_name      = agent_name
    @objective       = objective
    @licence_to_kill = licence_to_kill
  end

  def assign
    print "Mission #{mission_name} has been assigned to #{agent_name} with the objective to #{objective}."
    if licence_to_kill
      print " The licence to kill has been granted."
    else
      print " The licence to kill has not been granted."
    end
  end
end

m = M.new
mission = Mission.new(mission_name: 'Octopussy', agent_name: 'James Bond', objective: 'find the nuclear device', licence_to_kill: true)
m.assign_new_mission(mission)

```

As you can see, we simplified things quite a bit. The method slimmed down significantly and delegates the behaviour to the object in charge. **M** does not request mission data specifics anymore and certainly stays away from getting involved in how assigments get printed. Now she can focus on her real job and doesn’t need to be disturbed if any details of mission assignments change. More time for mind games and hunting down rogue agents. Win-win!

Feature envy breeds entanglement—by that I don’t mean the good kind, the one that let’s information travel faster than light spookingly—I’m talking about the one that over time might let your development momentum grind to an every more approaching halt. Not good! Why so? Ripple effects throughout your code will create resitance! A change in one place butterflies through all kinds of stuff and you end up as a kite in a hurricane. (Ok, a bit overly dramatic, but I give myself a B+ for the Bond reference in there.) 

As a general antidote for feature envy, you wanna aim for designing classes that are concerned mostly about their own stuff and have—if possible—single responsibilities. In short, classes should be something like friendly otakus. Socially that might not be the healthiest of behaviours but for designing classes it often is a reasonable guideline to keep your momentum where it should be—moving forward!

+ ### Shotgun Surgery

A little bit silly the naming isn’t? But at the same time its a pretty accurate description and funny too—definitely with a touch of nerdiness. Sounds like serious business though. It is! But luckily its not that hard to grasp. None the less its one of the nastier code smells. Why? Because it breeds dupliction like no other and its easy to loose sight of all the changes you’d need to make to fix things. What happens is you make a change in one class / file and you need to touch many other classes / files as well. 

For example, if you’re in a situation where you think you can get away with one little change in one place and then realize that you have to wade through a whole bunch of files to make either the same change or fix something else that is broken because of it. NOT good, not at all! That sounds more like a good reason why people start to hate the code they’re dealing with. If you have a spectrum with DRY code on one side then code that needs often shotgun surgery is pretty much on the opposite end. Don’t be lazy and let yourself go there. I’m sure you’d rather open one file and apply your changes there. That’s the kind of lazy you should strive for!

To avoid this smell here’s a short list you can look out for right away:

+ Code Duplication
+ Long Parameter List
+ Feature Envy
+ Coupling

What do we mean when we talk about code that is coupled. Let’s say we have objects **A** and **B**. If they are not coupled then you can change one of them without affecting the other. Otherwise you’ll more often than not also have to deal with the other object as well. This is a problem and shotgun surgery is a symptom for tight coupling as well. So worry about how easy you can change your code—ALWAYS!—because that also means that your level of coupling is acceptably low. Having said that, I realize that your expectations would be  undrealistic if you want to avoid it all the time at all costs. That’s not gonna happen! You will find good reasons like replacing conditionals with *Polymorphism*. In such a case, a litle bit of coupling, shotgun surgery and keeping the API of objects in sync is well worth getting rid of a ton of case statements via a **Null Object** for example.(More on that in a later piece)  

Most commonly you can apply one of the following refactorings to heal the wounds:

+ Move Method
+ Move Field
+ Extract Class
+ Inline Class

Let’s look at some code. This example is a slice of how a Spectre app handles payments between their contractors and evil clients. I simplified the payments a bit by having standard fees for both contractors and clients. So it doesn’t matter if Spectre is tasked to kidnap a cat or extort a whole country, the fee stays the same. Same goes for what they pay their contractors. In case an operation goes south and another Nr. 1 has to literally jump the shark, Spectre offers a full refund to keep evil clients happy. Spectre uses some proprietory payment gem that is basically a placeholder for any kind of payment processor. In the first example below it would be a pain if Spectre decides to use another library to handle payments. There would be more moving parts involved but for demonstrating shotgun surgery this amount of complexity will do I think:

**Example with shotgun surgery smell**:

``` ruby
class EvilClient
  #...

  STANDARD_CHARGE = 10000000
  BONUS_CHARGE    = 10000000

  def accept_new_client
    PaymentGem.create_client(email)
  end

  def charge_for_initializing_operation
    evil_client_id = PaymentGem.find_client(email).payments_id
    PaymentGem.charge(evil_client_id, STANDARD_CHARGE)
  end

  def charge_for_successful_operation
    evil_client_id = PaymentGem.find_client(email).payments_id
    PaymentGem.charge(evil_client_id, BONUS_CHARGE)
  end
end

class RefundOperation
  #...

  REFUND_AMOUNT = 10000000

  def process(operation)
    transaction_id = PaymentGem.find_transaction(operation.payments_id)
    PaymentGem.refund(transaction_id, REFUND_AMOUNT)
  end
end 

class Contractor
  #...

  STANDARD_PAYOUT = 200000
  BONUS_PAYOUT    = 1000000

  def process_payout
    spectre_agent_id = PaymentGem.find_contractor(email).payments_id
    if operation.enemy_agent == 'James Bond' && operation.enemy_agent_status == 'Killed in action'
      PaymentGem.transfer_funds(spectre_agent_id, BONUS_PAYOUT)
    else
      PaymentGem.transfer_funds(spectre_agent_id, STANDARD_PAYOUT)
    end
  end
end
```

When you look at this code you should ask yourself, should the **EvilClients** class be really concerned about how to the payment processor accepts new evil clients and charge them for operations? Of course not! Is it a good idea to spread the various amounts to pay all over the place? Should the implementation details of the payments processor be showing up in any of these classes. Most definitely not!

Look at it from that way. If you wanna change stuff on the way you handle payments, why would you need to open the **EvilClient** class? In other cases it could be user ur customer. If you think about it, it doesn’t make any sense to involve them. In this example it should be easy to see that changes to the way you accept and transfer payments create ripple effects throughout your code. Also, if you wanna change the amount you charge or transfer to your contractors you’d need addtional changes all over the place. Prime examples of shotgun surgery. And in this case we’re only dealing with three classes. Imagine your pain if a bit more realistic complexity is involved. Yep, you got it, that’s the stuff nightmares are made of. Let’s look at an example that is a bit more sane:


**Example with extracted class and without shotgun surgery smell**:

``` ruby
class PaymentHandler
  STANDARD_CHARGE            = 10000000
  BONUS_CHARGE               = 10000000
  REFUND_AMOUNT              = 10000000
  STANDARD_CONTRACTOR_PAYOUT = 200000
  BONUS_CONTRACTOR_PAYOUT    = 1000000

  def initialize(payment_handler = PaymentGem)
    @payment_handler = payment_handler
  end

  def accept_new_client(evil_client)
    @payment_handler.create_client(evil_client.email)
  end

  def charge_for_initializing_operation(evil_client)
    evil_client_id = @payment_handler.find_client(evil_client.email).payments_id
    @payment_handler.charge(evil_client_id, STANDARD_CHARGE)
  end

  def charge_for_successful_operation(evil_client)
    evil_client_id = @payment_handler.find_client(evil_client.email).payments_id
    @payment_handler.charge(evil_client_id, BONUS_CHARGE)
  end

  def refund(operation)
    transaction_id = @payment_handler.find_transaction(operation.payments_id)
    @payment_handler.refund(transaction_id, REFUND_AMOUNT)
  end

  def contractor_payout(contractor)
    spectre_agent_id = @payment_handler.find_contractor(contractor.email).payments_id
    if operation.enemy_agent == 'James Bond' && operation.enemy_agent_status == 'Killed in action'
      @payment_handler.transfer_funds(spectre_agent_id, BONUS_CONTRACTOR_PAYOUT)
    else
      @payment_handler.transfer_funds(spectre_agent_id, STANDARD_CONTRACTOR_PAYOUT)
    end
  end
end

class EvilClient
  #...

  def accept_new_client
    PaymentHandler.new.accept_new_client(self)
  end

  def charge_for_initializing_operation
    PaymentHandler.new.charge_for_initializing_operation(self)
  end

  def charge_for_successful_operation(operation)
    PaymentHandler.new.charge_for_successful_operation(self)
  end
end

class RefundOperation
  #...

  def process
    PaymentHandler.new.refund(self)
  end
end

class Contractor
  #...

  def process_payout
    PaymentHandler.new.contractor_payout(self)
  end
end

```

What we did here is wrap the **PaymentGem** API in our own class. Now we have one central place where we apply our changes if we decide that for example a **SpectrePaymentGem** would work better for us. No more touching of multiple—to payments’ internals unrelated—files if we have to adapt to changes. In the other classes that need to deal with payments we simply instantiated the **PaymentHandler** and delegate the needed functionality. Easy, stable and no reason to change.

And not only have we contained everything to a single file. Within the **PaymentsHandler** class, there is only one place we need to swap out and reference a possible new payement processor—in **initialize**. That is rad in my book. Sure, if the new payment service has a completely different API you need to tweak the bodies of a couple of methods in **PaymentHandler**. It’s a tiny price to pay compared to full on shotgun surgery—that’s more like surgery for a splinter in your finger really. Good deal!  

If you’re not careful when you write tests for a payment processor like this—or any external service you need to rely on—you are possibly in for serious headaches when they change their API. And the question is not will they change their API, only when. Through our encapsulation we’re in a much better postion to stub our methods for the payment processor. Why? Because the methods we stub are our own and they only change when we want them to. That is a big win. If you’re new to testing and this is not completely clear to your don’t worry about it. Take your time, this topic can be tricky at first. Because its such an advantage I just wanted to mention it for completeness sake.

As you can see I simplified payments processing quite a bit in these examples. I could have cleaned the final result some more as well but the point was to clearly demonstrate the smell and how you can get rid of it through abstraction. If you’re not completely happy with this class and see opportunities for refactoring I salute you and am happy take credit for it. I recommend you knock yourself out! A good start might be dealing with the way you find **payments_id**s. 

+ ### Divergent Change

Divergent change is kinda the opposite to shotgun surgery where you want to change one thing and need to blast that change through a bunch of different files. Here a single class is often changed for different reasons and in different ways. My recommendation is to identify parts that change together and extract them in a separate class that can focus on that single responsibility. These classes in turn should also have no more than one reason to change—if not, another divergent change smell is most likely conspiring to bite you.  

Classes that suffer from divergent change are ones that get changed a lot. With tools like [Churn](https://github.com/danmayer/churn) you can measure how often particular parts of your code needed to change in the past. The more points you find on a class the higher the probability that divergent change might be at work. I also wouldn’t be surprised if the same classes are ones that cause the most bugs overall. 

Don’t get me wrong, getting changed often itself is not directly the smell—its a useful symptom though. Another very common and more explicit symptom is that this object needs to juggle more than one responsibilities. The *single responsibility principle* [SRP](https://en.wikipedia.org/wiki/Single_responsibility_principle) is an excellent guideline to write more stable code and to prevent this code smell in general. It can be tricky to follow though—but nevertheless still worth grinding for.

Let’s look at this nasty example below. I modified the shotgun surgery example a bit. [Blofeld](https://en.wikipedia.org/wiki/Ernst_Stavro_Blofeld), head of *Spectre*, might be known to micromanage stuff but I doubt he would be interested in half the stuff this class is involved with. The **Spectre** class has way to many different things its concerned about:

+ Assigning new operations
+ Charging for their dirty work
+ Printing mission assignments
+ Dealing with the PaymentGem internals
+ Killing unsuccessful spectre agents
+ Paying their Spectre agents / contractors
+ It also knows about the amounts of money for charging and payout

``` ruby
class Spectre

  STANDARD_CHARGE = 10000000
  STANDARD_PAYOUT = 200000

  def charge_for_initializing_operation(client)
    evil_client_id = PaymentGem.find_client(client.email).payments_id
    PaymentGem.charge(evil_client_id, STANDARD_CHARGE)
  end

  def contractor_payout(contractor)
    spectre_agent_id = PaymentGem.find_contractor(contractor.email).payments_id
    PaymentGem.transfer_funds(spectre_agent_id, STANDARD_PAYOUT)
  end

  def assign_new_operation(operation)
    operation.contractor = 'Some evil dude'
    operation.objective  = 'Steal a boatload of valuable stuff'
    operation.deadline   = 'Midnight, November 18th'
  end

  def print_operation_assignment(operation)
    print "#{operation.contractor} is assigned to #{operation.objective}. The mission deadline ends at #{operation.deadline}."
  end

  def dispose_of_agent(spectre_agent)
    puts "You disappointed this organisation. You know how Spectre handles failure. Good bye #{spectre_agent.code_name}!"
  end
end
```

Seven different responsibilities on a single class. Not good!  You need to change how agents are disposed of? One vector for change the **Spectre** class. You wanna handle payouts differently? Another vector. You get the drift. Although this example is far from being realistic, it still tells the story how easy it is to amass behaviour that needs to change frequently in a single place for no good reason. We can do better!

``` ruby
class Spectre
  # ...

  def dispose_of_agent(spectre_agent)
    puts "You disappointed this organisation. You know how Spectre handles failure. Good bye #{spectre_agent.code_name}!"
  end
end

class PaymentHandler
  STANDARD_CHARGE            = 10000000
  STANDARD_CONTRACTOR_PAYOUT = 200000

  #...

  def initialize(payment_handler = PaymentGem)
    @payment_handler = payment_handler
  end

  def charge_for_initializing_operation(evil_client)
    evil_client_id = @payment_handler.find_client(evil_client.email).payments_id
    @payment_handler.charge(evil_client_id, STANDARD_CHARGE)
  end

  def contractor_payout(contractor)
    spectre_agent_id = @payment_handler.find_contractor(contractor.email).payments_id
    @payment_handler.transfer_funds(spectre_agent_id, STANDARD_CONTRACTOR_PAYOUT)
    end
  end
end

class EvilClient
  #...

  def charge_for_initializing_operation
    PaymentHandler.new.charge_for_initializing_operation(self)
  end
end

class Contractor
  #...

  def process_payout
    PaymentHandler.new.contractor_payout(self)
  end
end

class Operation
  attr_accessor :contractor, :objective, :deadline

  def initialize(attrs = {})
    @contractor = attrs[:contractor] 
    @objective  = attrs[:objective] 
    @deadline   = attrs[:deadline] 
  end

  def print_operation_assignment
    print "#{contractor} is assigned to #{objective}. The mission deadline ends at #{deadline}."
  end
end
```

Here we extracted a bunch of classes and gave them their own unique responsiblity—and therefore their own contained reason to change. You want to handle payments differently? Now you won’t need to touch the **Spectre** class. You need to charge or payout differently? Again, no need to open the file for **Spectre**. Printing operation assignments is now the business of operation—where it belongs. That’s it. Not too complicated I think but definitely one of the more common smells you should learn to handle early imho.
