---
layout: post
title: Ruby / Rails Code Smells 02
date: 2015-11-13 04:29:10 +0100
comments: true
sharing: true
published: true 
categories: [Ruby, Rails, thoughtbot, TDD, BDD, Test-Driven-Design, RSpec, Factory Girl]
---

{% img /images/code_smells/code_smell_01_600_mirrored.jpg %}

### Topics

+ Feature Envy

+ ### Feature Envy

Let’s revisit an example from the previous article. We extracted a long list of parameters for **#assign_new_mission** into a *parameter object* via the **Mission** class. So far so cool.

**M with feature envy**

``` ruby
class M
  def assign_new_mission(mission)
    print "Mission #{mission.mission_name} has been assigned to #{mission.agent_name} with the objective to #{mission.objective}."
    if mission.licence_to_kill
      print " The licence to kill has been granted."
    else
      print " The licence to kill has not been granted."
    end
  end
end

class Mission
  attr_reader :mission_name, :agent_name, :objective, :licence_to_kill

  def initialize(mission_name: mission_name, agent_name: agent_name, objective: objective, licence_to_kill: licence_to_kill)
    @mission_name    = mission_name
    @agent_name      = agent_name
    @objective       = objective
    @licence_to_kill = licence_to_kill
  end
end

m = M.new

mission = Mission.new(mission_name: 'Octopussy', agent_name: 'James Bond', objective: 'find the nuclear device', licence_to_kill: true)

m.assign_new_mission(mission)

# => "Mission Octopussy has been assigned to James Bond with the objective to find the nuclear device. The licence to kill has been granted."

```

I briefly mentioned why we can simplyfy the **M** class even more by moving the method to **assign_new_mission**(s) to the new class for the parameter object. What I didn’t address was the fact that **M** had an easily curable form of *feature envy* as well. She was way too nosy about the missions attributes. Its not only a bad case of micromanagement but also a very common code smell.

Let me show you what I mean. In **M#assign_new_mission**, **M** is “envious” about the data in the new parameter object and wants to access it all over the place. 

+ **mission.mission_name**
+ **mission.agent_name**
+ **mission.objective**
+ **mission.licence_to_kill**

Additionally to that you also have a parameter object **Mission** that is only responsible for data right now—which is another smell.

This whole situation tells you basically that **#assign_new_mission** wants to be somewhere else and **M** doesn’t need to know the details of how missions get assigned. After all, why wouldn’t it be a missions’ responsibility to assign new missions? Remember to always to put things together that also change together.

**M without feature envy**

``` ruby
class M
  def assign_new_mission(mission)
    mission.assign
  end
end

class Mission
  attr_reader :mission_name, :agent_name, :objective, :licence_to_kill

  def initialize(mission_name: mission_name, agent_name: agent_name, objective: objective, licence_to_kill: licence_to_kill)
    @mission_name    = mission_name
    @agent_name      = agent_name
    @objective       = objective
    @licence_to_kill = licence_to_kill
  end

  def assign
    print "Mission #{mission_name} has been assigned to #{agent_name} with the objective to #{objective}."
    if licence_to_kill
      print " The licence to kill has been granted."
    else
      print " The licence to kill has not been granted."
    end
  end
end

m = M.new
mission = Mission.new(mission_name: 'Octopussy', agent_name: 'James Bond', objective: 'find the nuclear device', licence_to_kill: true)
m.assign_new_mission(mission)

```

As you can see, we simplified things quite a bit. The method slimmed down significantly and delegates the behaviour to the object in charge. **M** does not request missions data specifics anymore and certainly stays away from getting involved in how printing assigments are done. Now she can focus on her real job and doesn’t need to be disturbed if any details of mission assignments change. More time for mind games and hunting down rogue agents. Win-win!

This smell breads entanglement—by that I don’t mean the good kind, the one that let’s information travel faster than light spookingly—I’m talking about the one that over time might let your development momentum grind to an every more approaching halt. Not good! Bad entanglement! Why so? Ripple effects throughout your code! A change in one place butterflies through all kinds of stuff and you end up as a kite in a hurricane. (Ok, a bit overly dramatic, but I give myself a B+ for the Bond reference in there.) 

As a general antidote for feature envy, you wanna aim for designing classes that are concerned mostly about their own stuff and have—if possible—single responsibilities. In short, classes should be something like friendly otakus. They keep their business to themselves, are too busy managing their own collections of vital pop-cultural achievemtens and therefore have no time for too many friends or extracurricular stuff. Socially that might not be the healthiest of behaviours but for designing classes it often is a reasonable guidelineto keep your momentum where it should be—moving forward!

