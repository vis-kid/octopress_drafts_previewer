---
layout: post
title: Middleman Basics 01
date: 2015-11-05 04:29:10 +0100
comments: true
sharing: true
published: true 
categories: [Ruby, Rails, thoughtbot, TDD, BDD, Test-Driven-Design, RSpec, Factory Girl]
---

{% img /images/middleman/Three_Stooges_1959.jpg %}

### Topics

+ Middleman & Static Pages
+ Installation & Getting Started
+ Configuration
+ A new Site
+ Structure
+ Build vs Deploy
+ Frontmatter
+ Templating
+ Helpers
+ Layouts
+ Partials
+ Extensions

+ ### Middleman & Static Pages

What’s all the fuzz lately about static sites? Easy, they’re fast, pretty straightforward to set up and lightweight I’d say. Because you’re not serving anything database related, static sites are pretty reliable and speedy. HTML, CSS and JS—that’s all. What’s it for? Well, a lot of people use it to set up their blogs and personal pages. Landing pages that are hit by traffic heavily are also a good candidate. [HealthCare.gov](https://www.healthcare.gov/) from the Obama administration famously used Jekyll, another static site generator, for their site. Its not a Swiss Army knife for every purpose but if you need something quick and easy that is able to scale out of the box, static site can be amazing. Especially if you can host them for free on [GitHub Pages](https://pages.github.com/) or [Heroku](https://www.heroku.com/). 

I guess the whole static site hipness got slowly started a few years back when [Jekyll](http://jekyllrb.com/) came along. Of course, static sites are as old as the first “Hello World!” from Sir Tim Berners-Lee but over the past 15 years, database backed apps were mostly “all that mattered”. Couple of years back, one of the co-founders of GitHub needed a better way to write blogs and he came up with Jekyll—this hip static site generator for “Blogging like a hacker”. Its pretty amazing! I’ve used it on a couple of occasions and have only good things to report. The core team is awesome too. Anyhow, for this series my editor and I agreed it would be more interesting to cover [Middleman](https://middlemanapp.com/). It might be fair to say that Middleman is a bit less “blog-aware” out of the box but none the less equally as powerful and great quality-wise.

Middleman uses Ruby and offers a pretty extensive set of features to build cool stuff. Couple of my favorite blogs use Middleman. If you’ve ever used Rails or Sinatra you’ll feel at home right away. Middleman, as well as Jekyll, are the go-to options for static sites in the Ruby community. I have heard more and more designers argue that they like using them too—for prototyping and for setting up their own personal pages. What a lot of these static site frameworks have in common is that they are pretty straightforward to use. I actually believe its a good idea to teach people coding by playing with one of these ruby based static sites—instead of jumping into Rails or Sinatra right away. (Sure, Sinatra is small too but there are still more concepts at work compared to Middleman for example.) Next time someone wants to learn to program in Ruby and asks me for directions I’ll probably point them towards Middleman or Jekyll.

So in this article I’ll assume that you are at least a bit interested in Ruby and have it installed on your system. Knowing how to deal with RubyGems is necessary too. I’ll do my best to not go over your head with programming concepts but I won’t cover basics like loops, code blocks and such. For the newbies among you, don’t worry, Middleman has not that many moving parts or tons of magic—not that I’m one of those magic naggers—and they I believe its easy to learn too. 

+ ### Installation & Getting Started

So you got Ruby and RubyGems under your belt? Great, then we’re good to go.

**Terminal**:

``` ruby
gem install middleman
```

After this process has finished, you’ll be able to use three handy commands in your shell.

+ **middleman init**

This command initiates a new project. It also takes arguments like which template you wanna start with. More about this later.

**Terminal**:

``` ruby
middleman init your_fancy_app
```

You can use templates for your apps right from the start. There are a couple of ready out of the box, like one for blogs for example and you can use your won custom ones. More on that in a later article.  

**Terminal**:

``` ruby 
middleman init your_fancy_blog --template=blog
```

``` ruby
middleman init your_fancy_mobile_app --template=mobile
```

+ **middleman server**

Middleman comes with a server for your development of course. If you start it up you’ll be able to see your site at **http://localhost:4567/ **. If you just type **middleman** without any additional argument, your server gets also fired up. Shutdown your server with **CTRL-c**.

+ **middleman build**

Once you have something you are ready to put on a internet-facing server you need to **build** your site. That means that whatever you have prepared in your **source** folder gets processed, especially interesting for your files that need preprocessors like [Slim](http://slim-lang.com/about.html), [Haml](http://haml.info/), [Sass](http://sass-lang.com/), [CoffeeScript](http://coffeescript.org/) get translated into their respective counterparts and put into your **build** directory which your server will host.

So let’s get get started with **source** and **build** folders. Between them is the dividing line that separates your development and production sections. When you use your local web server for development, **source** gets used to serve your app. The **build** folder is used by your non-local servers to serve your static pages and gets built every time you use **middleman build** in your command line—it overrides every new folder in **source** was in there before. Therefore you should be careful to not accidentally spend your time coding in **build** because it will disappear after the build process. Sure there is Git but in general, all your development is supposed to happen in **source**.

#### Attention!

Do yourself a favor right away and activate [LiveReload](http://livereload.com/) to instantly refresh your pages automatically after changes to your HTML, Sass or JS files. This is of great convenience during development—you won’t regret it! In the past it was sometimes a pain to set up but Middleman offers *LiveReload* out of the box—you just need to uncomment the following line in **config.rb**:

``` ruby
# Reload the browser automatically whenever files change
activate :livereload
```

Let’s check out the skelleton structure of a Middleman appthen. The main components are:

+ images
+ javascripts
+ layouts
+ stylesheets
+ config.rb
+ An index.html.erb file
+ A Gemfile

As you see, the most Jazz goes on in the **source** folder. What I like about Middleman apps is their organization—even if you are a newbie, its pretty hard to get lost in here. One of the reasons I recommend beginners to play with Middleman first. 

#### Screenshot:

{% img /images/middleman/source_structure.png %}

If you are unhappy with the naming of some of these folders you can change that in your configurations (**config.rb**) of course. The same names will be used then for your finished **build** folder. 

``` ruby
set :css_dir,    'custom_foler_name'

set :js_dir,     'custom_foler_name'

set :images_dir, 'custom_foler_name'
``` 

When you have your server running, you can check out other options to configure Middleman right in your browser: http://localhost:4567/__middleman/config/. Not all of them might make sense or are even important to know. Give it a glance and a mental bookmark is totally sufficient for now.
