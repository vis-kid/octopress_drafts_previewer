---
layout: post
title: Slim Basics 01
date: 2016-02-08 04:29:10 +0100
comments: true
sharing: true
published: true 
categories: [AntiPatterns, Ruby, Rails, Templating, Slim]
---

Titles

Boss-level Ruby templates with Slim

Deluxe templating with Slim

{% img /images/Slim/slim-fishbowl-refined.png %}

## Topics

+ Why Slim?
+ What are Templates?
+ What about ERB & Haml?
+ Getting Started
+ Syntax
+ HTML Tags
+ Line Indicators
+ Helpers
+ Safety
+ Logic-less Mode
+ Performance
+ Framework Support
+ Command Line Slim slimrb
+ Temple & Tilt
+ Rails
+ Sinatra

## Why Slim?

If you have given Haml a shot before, you’ll probably already know a couple of the arguments I’m gonna make. I think it’s nevertheless a good idea to follow along because you might have already decided to use a more minimalistic templating engine and I’d like you to see the advantages Slim offers as well.

Before we dive into why Slim is cool, I wanna answer real quick what Slim actually is and what it does for you. The documentation sums this up quite nicely: “Slim is a fast, lightweight templating engine with support for Rails 3 and 4”. You can also be use it with Sinatra and even plain Rack. So, if you are a bit tired of using ERB for writing your templates or you are not super satisfied with what Haml has to offer, then you are barking up exactly the right tree with Slim. In terms of syntax used, the people behind Slim were trying to find an answer to the following question: “What's the minimum required to make this work?” For writing the minimal amount of front-end code possible, this sure sounds like the right question to ask imho. Does Slim offer a perfect solution to all your templating concerns? Probably not, but quite frankly, it might just offer the best! Is easy to learn? I think so, but it’s hard to know what other people consider easy. I’d say this though,it takes a bit to get used to but it’s definitely no rocket science. So no need to feel intimidated if you are a bit new to the coding side of things. Will you have a good time with it? Absolutely! 

So, why Slim? The answer is quite straightforward I think. Your markup should be as beautiful as possible! You should have a good time working with it and the less time you need to spend wading through tons of tag matter the better. What is beautiful you might ask? Of course ,that is not an answer I’ll try to tackle, but being minimal in that regard rarely hurts. What about becoming super cryptic because the templating engine tries to be super smart in being minimal? That is a fair concern and I hope you will be happy to hear that the team behind Slim takes this very seriously. They want to remove as much as possible from plain old HTML and reveal only the essential parts—all without becoming too cryptic. They core team tries to go even a step beyond that, they are really concerned about the aesthetics of Slim code. Pretty good deal, don’t you think? 

Isn’t it much nicer if you can just glance at a template and be able to easily digest what’s going on? Templates can become a very ‘crowded’ place—even if you make intelligent use of partials—and as a consequence, you want to reduce the amount of noise to the absolute minimum. Have you maybe tried the indented Sass (.sass) syntax? I hope you did, it’s just awesome! If so, you probably will have a similar appreciation for what Slim has to offer. It’s also whitespace sensitive which lead to really succinct and readable code. Let’s take this piece of HTML / ERB code and compare it to Slim.

``` html

<!DOCTYPE html>
<html>
  <head>
    <title><%= full_title(yield(:title)) %></title>
    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' => true %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
    <%= csrf_meta_tags %>
  </head>
  <body>
    <header class="navbar">
      <div class="logo">
        <%= link_to "sample app", 'root_path', id: "logo" %>
        <nav>
          <ul class="navbar-right">
            <li><%= link_to "Home",   'root_path' %></li>
            <li><%= link_to "Help",   'help_path' %></li>
            <li><%= link_to "Log in", 'login_path' %></li>
          </ul>
        </nav>
      </div>
    </header>
    <div class="main">
      <%= yield %>
    </div>
  </body>
</html>

```

Let’s compare this with a Slim version.

``` slim

doctype html
html
  head
    title
      = full_title(yield(:title))
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' => true
    = javascript_include_tag 'application', 'data-turbolinks-track' => true
    = csrf_meta_tags
  body
    header.navbar
      .logo
        = link_to "sample app", 'root_path', id: "logo"
        nav
          ul.navbar-right
            li
              = link_to "Home",   'root_path'
            li
              = link_to "Help",   'help_path'
            li
              = link_to "Log in", 'login_path'
    .main
      = yield

```

Sure, you are not used to the syntax yet so it might look a bit alien at first but I’m sure you can appreciate how succinct it reads. No left / right angle brackets, no need to write divs—instead we can focus on the name their ids and classes have—it feels a lot less messy and more organized, don’t you think?

For comparison, here is the Haml version. It’s really not meant as an opportunity to bash Haml, it just shows you how similar it is but also that Slim goes a step further with its choice of minimal syntax and the result is even more elegant I think. Why go so minimal and still make me type the ```%``` sign all the time. My index finger has better things to do than grabbing shift-5 all the time. Can you customize that behaviour? Pretty sure, at least I hope so! But the design seems a bit flawed and less spartan compared to Slim. I realize that this is a matter of taste though, so I’ll leave it at that.

``` haml

!!!
%html
  %head
    %title= full_title(yield(:title))
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' => true
    = javascript_include_tag 'application', 'data-turbolinks-track' => true
    = csrf_meta_tags
  %body
    %header.navbar
      .logo
        = link_to "sample app", 'root_path', id: "logo"
        %nav
          %ul.navbar-right
            %li= link_to "Home",   'root_path'
            %li= link_to "Help",   'help_path'
            %li= link_to "Log in", 'login_path'
    .main
      = yield

```


+ It’s speedy.
+ Super readable.
+ Index finger friendly.
+ It has a smart syntax.
+ Its aesthetic is minimal.
+ It is highly configurable
+ It’s boss-level templating.
+ It’s fun to write and looks dope.
+ Automatic HTML escaping by default
+ Super nice Rails and Sinatra integration
+ Very minimal templates that are easy to maintain.
+ Is extensive and allows you to write plugins and extensions.
+ There is a logic-less mode for times when you want to output HTML but have no reason to include Ruby code.
+ It has configurable shortcuts for tags—which is a pretty nice feature to customize the engine to your needs.
+ And finally because Slim’s syntax is guided by one very cool motto: “What's the minimum required to make this work”. This is very hard not to like.

## What Are Templates?

In terms of programming experience, if you consider yourself to be more on the newbie side of things, I’ll try to give you a quick round trip before we start using Slim. When people talk about templates, they mostly mean plain HTML markup with dynamic code that is often used for flow control, object injection or partial template (partials) rendering. For example when a controller provides you with instance variables that can be used by the view via (instance)variable substitution to display attributes from that object. All this happens via the template processor of your choice—ERB, Haml, Slim and the likes—which combines all your web templates into a final web page. Templates can also be used to generate XML and RSS feeds as well as other forms of structured text files.

You can define various “layouts” that are handling particular parts of your website and the data that needs to be displayed systematically and with the smallest amount of repetition. When you started playing with Rails, you surely have been using ERB for exactly these kinds of scenarios. ERB takes the plain text portions and hands them to the final document and only processes code that is marked as such. I’m not going into details how ERB works and suppose you have a basic familiarity before you dive into Slim. I would not recommend to use Slim if you are not already familiar with Rails’ default way of templating since you will have a much easier time to play with Slim understanding how templating works out of the box in Rails. 

Below is a basic ERB example of a template that displays a collection of missions that are associated with an ```@agent``` object. Directly below, it also uses a method from a Ruby Gem to paginate the ```@missions``` collection.

``` erb

<% if @agent.missions.any? %>
  <h4>Missions (<%= @agent.missions.count %>)</h4>
  <ul class="missions">
    <%= render @missions %>
  </ul>
  <%= will_paginate @missions %>
<% end %>

```

This is a small section of a template that shows nicely that it’s nothing more than a static HTML part that has some dynamic injections from some Ruby code. If we wouldn’t use templates like this, we’d have to manually write code for every new object that we want to see displayed on a page. Not sure about you, but I can’t imagine a bigger nightmare or waste of time than that. Templates give us a handy tool for making our view layer smart and dynamic without repeating ourselves. As you can also see from this example, templates let us use partial templates that we can render where needed. Here we have a ```_mission.html.erb``` partial somewhere which helps us to iterate over a collection of ```@mission``` objects which in turn get listed inside our ```.missions``` class.

As you can see, templates are nothing magic but are super handy to make developing web apps a lot more efficient and organized. I just wanted to make sure that we are all on the same page before diving into Slim.

## What about ERB & Haml?

If you like using these tools, it’s perfectly fine. Nothing wrong with that. The thing is, if you are looking for something smarter that is more minimalistic, it’s hard to find something that goes further than Slim. To me it’s the most streamlined templating solution in Ruby land that I know. They all work fine, it’s a matter of personal preference I guess.

## Getting Started

### Slim With Rails

No surprise, there is a gem for that.

#### Gemfile

``` ruby

gem 'slim-rails'

```

#### Shell

``` bash

bundle install

```

That’s it, we’re all set. Because you installed this gem, Slim will get loaded and initialized whenever your app loads. Also, for your convenience, when you generate controllers via ```rails g controller```, you will automatically get ```.slim``` view files for your view—```.html.erb``` files no more. Works the same with scaffolds, but I hope you are not using them really!

To demonstrate this behaviour for folks who are new to using Rails’ generators, I’ll create a controller for secret service operatives that has all the standard REST controller actions:

#### Shell

``` bash

rails generate controller SecretServiceOperatives index new create show edit update destroy

```

Among other stuff, you’ll get all the ```.slim``` files you need. Rails puts an extra ```.html``` in there as well—you can get rid of that if it bothers you of course. All that matters is that the slim file extension is already there and that it’s ready for preprocessing your Slim code. Yay!

``` bash

...

invoke  slim
     create    app/views/secret_service_operatives
     create    app/views/secret_service_operatives/index.html.slim
     create    app/views/secret_service_operatives/new.html.slim
     create    app/views/secret_service_operatives/create.html.slim
     create    app/views/secret_service_operatives/show.html.slim
     create    app/views/secret_service_operatives/edit.html.slim
     create    app/views/secret_service_operatives/update.html.slim
     create    app/views/secret_service_operatives/destroy.html.slim

...

```

The next step would be to open your application layout and to replace boilerplate code with something Slim. Also, don’t forget to rename the ```application.html.erb``` file to ```application.slim``` (or ```application.html.slim``` if you want). We have already slimmed down a bit, even the file name has lost some weight.

#### app/views/layouts/application.slim

``` slim

doctype html
html
  head
    title
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' => true
    = javascript_include_tag 'application', 'data-turbolinks-track' => true
    = csrf_meta_tags
  body
    header.navbar
      .logo
        = link_to "Spy app", 'root_path', id: "logo"
        nav
          ul.navbar-right
            li
              = link_to "Home",    'root_path'
            li
              = link_to "Help",    'help_path'
            li
              = link_to "Sign up", 'sign_up_path'
            li
              = link_to "Log in",  'login_path'
    .main
      h1.welcome Welcome to Boss Level Slim Templates!
      = yield

```

Nothing fancy, but a good start—and as easy as can be I think.

#### Screenshot

{% img /images/Slim/boss-leve-slim-application-layout-welcome.png %}

As a little side note, if you are ever curious which version of the gem you have installed, this little command will tell you—it’s handy for any gem as well of course:

#### Shell

``` bash

bundle show 'slim-rails' 

```

It tells you where it is stored and which version this gem currently has. The output looks like this:

``` bash

/Library/Ruby/Gems/2.3.0/gems/slim-rails-3.0.1

```

### Sinatra

For the Sinatra enthusiasts among you, I wanted to mention how to get started as well. First we need to install the gem of course.

``` bash

gem install slim

``` 

And after that you are almost done. In your Sinatra app, you just need to require Slim and you are good to go.

#### some_sinatra_app.rb

``` ruby

require 'sinatra'
require 'slim'

get('/') { slim :index }

__END__

@@ index
doctype html
html
  head
    title Slim Templates
    body
      h1 Boss Level Ruby Templates With Slim



```

Here I used an inline template to write the Slim markup in the same file and told Sinatra that I want to use Slim for the index file when it makes a get request to the root path. I just needed to reference the inline template inside a curly braces block. What you see below the ```@@ index```—which signifies the index template—is all white spece sensitive Slim syntax.

#### Screenshot

{% img /images/Slim/sinatra-setup.png %}

I think it’s a good time to show you how to write some Slim.

## Syntax

### HTML tags

#### HTML <!DOCTYPE> Declaration

Let’s start with the simplest one, the doctype declaration. As you probably know and already forgot, this must be declared on top of you HTML document—before the actual ```<html>``` tag. FYI, it’s not an HTML tag and instructs the browser about the version of the HTML page. Among the different versions for ```<!DOCTYPE>``` there is only one for HTML5: ```<!DOCTYPE html>```—thank god!—which is exactly what we get when we write ```doctype html``` or ```doctype 5``` in Slim.

``` slim

doctype html
html
  head

doctype 5
html
  head

```

#### ID shortcut # and class shortcut .

Writing front-end code means a ton of classes and ever so few ids—I hope you. To avoid writing these over and over again, Slim meets you more than halfway and let’s you short-circut the whole process bascically. Let me show you what I mean. The following Slim code:

``` slim

#logo
h1.header
.evil-wrapper
  h2#author-name
  ul.books

```

gets compiled to this HTML output:

``` html

<div id="logo"></div>
<h1 class="header"></h1>
<div class="evil-wrapper">
  <h2 id="author-name"></h2>
  <ul class="books"></ul>
</div>

```

As you cann see, the dot between the HTML tag suggests to Slim that you want to use a class and the name that follows is what you want to name it. Same goes for ids—you just use the hash symbol (aka pound sign) which does the trick. Astute readers surely recognized that the versions without a leading tag trigger the creation of a div with the corresponding class or id—which can be seen for ```<div id="logo"></div>``` and ```<div class="evil-wrapper"></div>```. Pretty handy, don’t you think?

You can also be more expressive in your Slim code if you want to. Nobody hinders you to write your good ol’ classes and ids by hand. If you somehow feel attached to that, go for it. I like the more succinct version because it also let’s me avoid typing quotes and repeated text all the time. Up to you, whatever makes you happy! The code below is a bit more verbose but renders the exact same HTML as above:

``` slim

div id='logo'
h1 class='header'
div class='evil-wrapper'
  h2 id='author-name'
  ul class='books'

```

Now, isn’t that a thing of beauty? Imagine all these dreaded tags that you don’t need to write yourself, plus getting rid of all the excess enclosing angle brackets. Sure, your code editor can do a lot of this work for you as well, but does your editor also read the code for you? Exactly! When you come back to read your code, you also want a succinct document that is super easy to digest visually. I think this simple examples shows best what a tool like Slim has to offer. It’s these little things that add up to a great tool and timesaver in the long run. Even if you only use it for exactly that functionality and ignore the other more advanced features for now, making the switch to Slim would already pay off big time imho.

#### Text Content

Writing text is as easy as you’d expect of course. Just add it on after your tags.

Slim:

``` slim

h1#welcome-header Your funky welcome message goes here!

```

HTML Output:

``` html

<h1 id="welcome-header">
  Your funky welcome message goes here!
</h1>

```

Nothing more to add, easy as can be!

#### Attributes

HTML attributes which provide additional info about the tags can be included as follows:

Slim:

``` slim

a href="http://slim-lang.com" title='Slim Homepage' Goto the Slim homepage

img alt="James Bond posing together with M" src="image.png" height="90" width="90"/

```

HTML Output:

``` html

<a href="http://slim-lang.com" title="Slim Homepage">Goto the Slim homepage</a>

<img alt="James Bond posing together with M" height="90" src="image.png" width="90" />

```

You can basically chain them on and Slim will separate it from the text content—if present. If you look closely, you can see that our ```img``` tag has a trailing slash which explicitly closes tags in Slim. For images or more convoluted tags surely useful. FYI, HTML5 does not require you to write the attribute names in lower case nor to use quotes around attribute values. It is nevertheless recommended standard practice by the W3C.

#### Attribute Wrappers

Slim offers you wrappers to make your attributes easier to read. Might not be necessary all the time, but it’s handy to know if a tag with lots of attributes needs some taming. You can use any of the following delimiters to wrap attributes: ```{}```, ```[]``` and ```()```.

Slim:

``` slim

a{href="http://slim-lang.com" title='Home page'} Goto the home page

a{href="http://slim-lang.com/about.html" title='About page'
  class='link' id='about'} Goto the about page

h2[id="big-header" class="agent-header tagline"] Funky headline

h3(id="small-header"
   class="agent 007 tagline") Some other funky headline

```

HTML Output:

``` html

<a href="http://slim-lang.com" title="Home page">Goto the home page</a>

<a class="link" href="http://slim-lang.com/about.html" id="about" title="About page">Goto the about page</a>

<h2 class="agent-header tagline" id="big-header">
  Funky headline
</h2>

<h3 class="agent 007 tagline" id="small-header">
  Some other funky headline
</h3>

```

If that’s easier for you to organize the markup, go for it! As illustrated by the second ```a``` and the ```h3``` tags, you can even spread attributes and selectors across multiple lines. Indentation seems to be enforced very forgivingly in regards whitespace sensitivity. My guess is though that not for long and you won’t wrappers much. You‘ll get used to the barebones Slim syntax in no time and save them for special occasions—like you probably should.

#### Attribute Merging

Btw, if you have multiple classes or ids per tag as in the example above, you can also write them more succinctly by daisy-chaining them. They will be automatically delimited by white space.

Slim:

``` slim

h2#big-header.agent-header.tagline Funky headline

h3#small-header.agent.007.tagline Small funky headline

```

Not that all these ids and classes mixed up like this represents best practices or anything, but this produces the exact same HTML as above. Pretty cool huh? Careful, spreading these across multiple lines won’t work without attribute wrappers though.

Another option would be to use an array with strings or just symbols to merge in attributes. In my book I’d call this one good to know but it’s not something I try to actively use. Might be handy if you want to interpolate somthing I suppose.

Slim:

``` slim

h2 class=["agent-header","tagline"] Funky headline

h3 class=:agent,:double_o_seven,:tagline Small funky headline

```

HTML Output:

``` html

<h2 class="agent-header tagline">
  Funky headline
</h2>

<h3 class="agent double_o_seven tagline">
  Small funky headline
</h3>

```

#### Attribute Interpolation

Did somebody say interpolation? Within quoted attributes, you can use Ruby to interpolate code if needed. A simple example should be enough to illustrate this behaviour:

Slim:

```slim

a href="http://#{url}" Goto #{url}

```

Again, not something you might use on a daily basis but it sure is good to know to have in your bag of tricks. The attribute values will be escaped by default btw. If you need that behaviour disabled, just use a ```==```.

```slim

a href=="http://#{url}" Goto #{url}

```

You can use full-on Ruby to play with your attributes as well. Just throw an equals sign in there where you want some Ruby code to be executed and you are ready to go.

``` slim

ul
  li id="agent_#{agent.id}" class=agent.role
    a href=(path_to_agent agent) =agent.name

```

That of course also means that you can use simple booleans the same way in your attributes as well.

``` slim

input type="text" disabled=false
input type="text" disabled=true
input type="text" disabled=nil

```

Groovy, let’s move on!

## Line Indicators
