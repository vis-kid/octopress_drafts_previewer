---
layout: post
title: Ruby / Rails Code Smell Basics 04
date: 2015-11-28 04:29:10 +0100
comments: true
sharing: true
published: true 
categories: [Ruby, Rails, Code Smells, Refactoring, Object Oriented Programming ]
---

{% img /images/code_smells/code_smell_01_600_mirrored.jpg %}

### Heads Up

This article was mostly written for folks a little more new to coding. Having obviously walked in these shoes myself, I remembered that it felt unneccessary foggy to get into code smells and refactorings. On the one hand, authors expect a certain level of proficiency and therefore might not feel super compelled to provide the reader with the same amount of context as a newbie might need to comfortably dive into this world sooner. As a consequence maybe, newbies on the other hand form the impression that they should wait a bit longer until they are more advanced to learn about smells and refactorings. I do not agree with that approach and think that making this topic more approachable will help them design better software earlier in their career. At least I hope it helps to provide junior peeps with a solid head start.

### Topics

+ Case Statements




+ ### A Final Whiff

The last article in this mini series is something like a bonus round. I wanted to introduce you to a another couple of smells that can be addressed quickly and without much fuzz. One for the road so to speak. I think with the knowledge you gathered from the previous articles, most of them wonâ€™t even need code examples to wrap your head around. When you open a book about refactoring you will easily find more smells than we have discussed. However, with these major ones under your belt you will be well prepared to deal with any of them. 
