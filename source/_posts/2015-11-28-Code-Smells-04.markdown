---
layout: post
title: Ruby / Rails Code Smell Basics 04
date: 2015-11-28 04:29:10 +0100
comments: true
sharing: true
published: true 
categories: [Ruby, Rails, Code Smells, Refactoring, Object Oriented Programming ]
---

{% img /images/code_smells/code_smell_01_600_mirrored.jpg %}

### Heads Up

This article was mostly written for folks a little more new to coding. Having obviously walked in these shoes myself, I remembered that it felt unneccessary foggy to get into code smells and refactorings. On the one hand, authors expect a certain level of proficiency and therefore might not feel super compelled to provide the reader with the same amount of context as a newbie might need to comfortably dive into this world sooner. As a consequence maybe, newbies on the other hand form the impression that they should wait a bit longer until they are more advanced to learn about smells and refactorings. I do not agree with that approach and think that making this topic more approachable will help them design better software earlier in their career. At least I hope it helps to provide junior peeps with a solid head start.

### Topics

+ Comments




+ ### A Final Whiff

The last article in this mini series is something like a bonus round. I wanted to introduce you to a another couple of smells that can be addressed quickly and without much fuzz. One for the road so to speak. I think with the knowledge you gathered from the previous articles, most of them won’t even need code examples to wrap your head around. When you open a book about refactoring you will easily find more smells than we have discussed. However, with these major ones under your belt you will be well prepared to deal with any of them. 

+ ### Comments

Generously applied comments are seldom a good idea—probably never. Why not? Because it might suggest that your design is not speaking for itself. That means your code is probably so complicated to understand that it needs literal explanations. First of all, who wants to go through hords of text in your code. That’s just bad form and not very considerate of people who come after you. You want to write code that is expressive enoug in itself. Create classes and methods that speak for themselves. In the best scenario, they tell a story that is easy to follow. That is probably one of the reasons *conventions over configurations* became so influential. Reinventing the wheel is certainly sometimes a good practice to sharpen your understanding and to explore new territory, but in fast-paced development environments your colleagues are looking for clarity and quick navigation—not only within your files but also within the mental map you create in your code.

I don’t wanna drift off in a whole nother topic, but naming plays a big role in all of that. And excesive commenting within your code is a little bit contradicting good naming practices / conventions. Don’t get me wrong, its fine to add comments, just stay on the path that “illumintates” your code—not distract from it. They should certainly not be instructions for clever code that mostly you can decipher because you wanted to show off. If you keep your methods simple—as you should be—and name everything with consideration then you have little need to write whole novels in between your code.

Stay away from the following:

+ Todo lists
+ Dead code commented out
+ Comments in method bodies
+ More than one comment per method

Its also useful to break out parts of methods via *extract method* and giving this part of a method a name that tells us about its responsibility. 

``` ruby
def create_new_user
 ...
end

visit root_path
fill_in name with: 'Jenny'
fill_in email with: 'j@j.com'
submit 'create user'
```

Use the free mileage you get by naming things properly via extracted methods. It makes your code som much smarter and easier to digest.
