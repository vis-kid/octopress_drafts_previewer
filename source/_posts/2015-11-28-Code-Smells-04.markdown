---
layout: post
title: Ruby / Rails Code Smell Basics 04
date: 2015-11-28 04:29:10 +0100
comments: true
sharing: true
published: true 
categories: [Ruby, Rails, Code Smells, Refactoring, Object Oriented Programming ]
---

{% img /images/code_smells/code_smell_01_600_mirrored.jpg %}

### Heads Up

This article was mostly written for folks a little more new to coding. Having obviously walked in these shoes myself, I remembered that it felt unneccessary foggy to get into code smells and refactorings. On the one hand, authors expect a certain level of proficiency and therefore might not feel super compelled to provide the reader with the same amount of context as a newbie might need to comfortably dive into this world sooner. As a consequence maybe, newbies on the other hand form the impression that they should wait a bit longer until they are more advanced to learn about smells and refactorings. I do not agree with that approach and think that making this topic more approachable will help them design better software earlier in their career. At least I hope it helps to provide junior peeps with a solid head start.

### Topics

+ Comments
+ Callbacks
+ Shitty Names
+ Mixins
+ Data Clumps




+ ### A Final Whiff

The last article in this mini series is something like a bonus round. I wanted to introduce you to a another couple of smells that can be addressed quickly and without much fuzz. One for the road so to speak. I think with the knowledge you gathered from the previous articles, most of them won’t even need code examples to wrap your head around. When you open a book about refactoring you will easily find more smells than we have discussed. However, with these major ones under your belt you will be well prepared to deal with any of them. 

+ ### Comments

Generously applied comments are rarely a good idea—probably never. Why not? Because it might suggest that your design is not speaking for itself. That means your code is probably so complicated to understand that it needs literal explanations. First of all, who wants to go through hoards of text in your code. That’s just bad form and not very considerate of people who come after you. 

You want to write code that is expressive enough in itself. Create classes and methods that speak for themselves. In the best scenario, they tell a story that is easy to follow. That is probably one of the reasons *conventions over configurations* became so influential. Reinventing the wheel is certainly sometimes a good practice to sharpen your understanding and to explore new territory, but in fast-paced development environments your colleagues are looking for clarity and quick navigation—not only within your files but also within the mental map you create in your code.

I don’t wanna drift off in a whole nother topic, but naming plays a big role in all of that. And excessive commenting within your code is a little bit contradicting good naming practices / conventions. Don’t get me wrong, its fine to add comments, just stay on the path that “illumintates” your code—not distract from it. They should certainly not be instructions for clever code that mostly you can decipher because you wanted to show off. If you keep your methods simple—as you should be—and name everything with consideration then you have little need to write whole novels in between your code.

Stay away from the following:

+ Todo lists
+ Dead code commented out
+ Comments in method bodies
+ More than one comment per method

Its also useful to break out parts of methods via *extract method* and giving this part of a method a name that tells us about its responsibility—rather than have all the details clutter up a high-level understanding of what’s going on within the method’s body.  

``` ruby

def create_new_agent
...
end

...
# create new user
visit root_path
click_on     'Create Agent'
fill_in      'Agent Name', with: 'Jinx'
fill_in      'Email',      with: 'jinx@nsa.com'
fill_in      'Password',   with: 'secretphrase'
click_button 'Submit'
...

```

What is easier to read? A no brainer of course! Use the free mileage you get by naming things properly via extracted methods. It makes your code so much smarter and easier to digest. And if you have had a habit of writing comments everywhere, I bet it will help you to trim them down by a very significant amount.

+ ### Callbacks

This is a simple one. Don’t use callbacks that are not related to persistence logic! Your objects have a persistence life cycle—creating, saving and deleting objects so to speak—and you don’t want to “pollute” that logic with other behaviour like business logic of your classes. Keep it simple, remember? Typical examples of what to avoid is sending emails, processing  payments and stuff. Why not? Because debugging and refactoring your code should be as easy as possible and messy callbacks have a reputation of interfering with these plans. Callbacks make it a bit too easy to muddy the waters and to shoot yourself in the foot multiple times. 

Another point that is problematic about callbacks is that it can hide the implementation of business logic in methods like **#save** or **#create**. So don’t be lazy and abuse them just because it seems convenient!  The biggest concern is coupling of concerns of course. Why let the create method of **SpectreAgent** for example deal with the delivery of a **#mission_assignment** or something. As so often, just because we can do it—easily—doesn’t mean we should. Its a guaranteed bite in the ass waiting to happen. The solution is actually pretty straightforward. If a callback’s behaviour has nothing to do with persistence simply create another method for it and you’re done. 

+ ### Shitty Names

Sorry to be so blunt, but just calling poor naming choices uncommunicative or simply bad doesn’t do the consequences justice I think. In effect, you are wasting other peoples’s time with bad naming choices—or even better your own if you have to revisit that piece of code in the future. The code you write are instructions to be read by you and other people and therefore a purely logical, super prosaic, overly clever, or worse, a plain lazy approach to naming things is one of the worst things you can leave behind. Aim to make your code easier to understand by providing better names. 

Clarity trumps false cleverness or unneccessary conciseness any day of the week! Work hard on naming methods, variables! and classes that make it easy to follow some sort of thread. I don’t wanna go as far as to say that you should aim for trying to tell a story but if you can, go for it! Machines are not the ones who need to “read” your code—its run by them of course. Maybe its one reason why the term “Software Writer” grew on me a bit as of lately—not because the engineering aspect should be diminished—writing software is more than writing soulles instructions for machines—at least software that is elegant and sparks joy to work with. Don’t freak out if this turns out to be a lot more difficult than you thought. Naming is notoriously hard!

+ ### Mixins

Mixins are a smell? Well, let’s say they can be smelly. Multiple inheritance through Mixins can be useful but there are a couple of things that make them less useful than you might have thought when you started out with OOP:

+ They are trickier to test.
+ They can’t have their own state.
+ They “pollute” the namespace a bit.
+ Its not always super clear where functionality comes from—since its mixed in.
+ They can inflate the size of classes / number of methods drastically. Small classes rule, remember? 

I suggest you read up a bit on “[Composition Over Inheritance](https://en.wikipedia.org/wiki/Composition_over_inheritance)”. The gist of it is that you should rely more on reuse of your own composed classes than through inheritance / subclassing. Mixins are a form of inheritance that can be put to good use but also something you should be a bit suspicious about.

 + ### Data Clumps

Watch out for repeatedly passing the same multiple arguments into your methods. That often suggests that they have a relationship that can be extracted into a class of its own—which can in turn often drastically simplify feeding these methods with data by reducing the size of arguments. The thing you have to weigh though is if its worth introducing a new dependency.

This smell is another form of subtle duplication that we can handle better. A good example is passing a long list of arguments that make up an address and credit card info. Why not package these infos in an existing class or extract a new class first and pass in the address and credit card instead. Another way to think about is having a range object instead of a start and an end. In case you have instance variables that fall for that smell extracing a class is worth considering. In other cases, a *parameter object* might offer the same quality of abstraction.

You’ll know that you have achieved a small win if your system is easier to understand and that you found a new concept—like credit card—that you could encapsulate into an object.
