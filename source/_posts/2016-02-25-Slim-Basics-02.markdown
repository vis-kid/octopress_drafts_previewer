---
layout: post
title: Slim Basics 02
date: 2016-02-25 04:29:10 +0100
comments: true
sharing: true
published: true 
categories: [Slim, Ruby, Rails, Templating, Slim]
---

{% img /images/Slim/slim-fishbowl-refined.png %}

## Topics

+ Outputting Code
+ Text interpolation
+ Control Code
+ Inline HTML
+ Verbatim Text
+ Comments
+ Custom Shortcuts
+ Configuring Slim


<!---
+ Helpers
+ Safety
+ Logic-less Mode
+ Performance
+ Framework Support
+ Command Line Slim slimrb
+ Temple & Tilt
-->

## Line Indicators

### Output

You have already seen a bit how to use Ruby in your templates. This section gives you all you need to make use of this. In the first article, we have been using Ruby already in our templates. Let me remind you what I mean:

#### Sim:

``` slim

html
  head
    title
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' => true
    = javascript_include_tag 'application', 'data-turbolinks-track' => true
    = csrf_meta_tags

```

As you can see, inside this head tag, we already used a couple of methods from Rails to deal with styles and JavaScript stuff—nothing major. All you need to do to execute Ruby code is prepend it with an equals ```=``` sign. If your code needs to spread over multiple lines, just append a backslash ```\``` at the end of each line and keep going onto the next one. Should you end the line in a comma ```,```, then you don’t need the backslash. Nice little touch if you ask me.

Let’s have a look at another, more concrete example. Writing forms is often a pain in the butt—lots of boilerplate code, lots of repetition and all these dreaded ```<%= %>``` signs in ERB. This can get messy in no time. Could be nicer huh?

ERB:

```erb

<%= form_for @agent do |f| %>

  <%= f.label      :name %>
  <%= f.text_field :name %>

  <%= f.label      :number %>
  <%= f.text_field :number %>

  <%= f.label      :licence_to_kill %>
  <%= f.check_box  :licence_to_kill %>

  <%= f.label      :gambler %>
  <%= f.check_box  :gambler %>

  <%= f.label      :womanizer %>
  <%= f.check_box  :womanizer %>

  <%= f.submit %>

<% end %>

```

A lot of stuff to write for creating a new ```@agent``` object, no? Slim lets you handle this a lot more succinct. We just keep the equals sign and get rid of most other stuff. Tadaa!

Slim:

``` slim

= form_for @agent do |f|

  = f.label      :name
  = f.text_field :name

  = f.label      :number
  = f.text_field :number

  = f.label      :licence_to_kill
  = f.check_box  :licence_to_kill

  = f.label      :gambler
  = f.check_box  :gambler

  = f.label      :womanizer
  = f.check_box  :womanizer

  = f.submit

```

You can clearly see why this project is called Slim. So much excess fat is gone. Don’t tell me you don’t like what you see, I know you’re digging it! Just an ```=``` sign and you can populate your markup with Ruby code—in this case from Rails of course. And when you compare it to the HTML rendered on the final page, it’s hard to ignore how compact Slim really is. 

HTML Output:

``` html
<form action="/" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" />
  <input type="hidden" name="authenticity_token" value="+P2I801EkEVBlsMgDo9g9/XgwwQfCBd1eoOBkFmgAHE4bxYi9HGUjEjsNwNMnEadV2tbDtYvQhFb4s/SNMXYtw==" />

  <label for="agent_name">Name</label>
  <input type="text" name="agent[name]" id="agent_name" />

  <label for="agent_number">Number</label>
  <input type="text" name="agent[number]" id="agent_number" />

  <label for="agent_licence_to_kill">Licence to kill</label>
  <input name="agent[licence_to_kill]" type="hidden" value="0" />
  <input type="checkbox" value="1" name="agent[licence_to_kill]" id="agent_licence_to_kill" />

  <label for="agent_gambler">Gambler</label>
  <input name="agent[gambler]" type="hidden" value="0" />
  <input type="checkbox" value="1" name="agent[gambler]" id="agent_gambler" />

  <label for="agent_womanizer">Womanizer</label>
  <input name="agent[womanizer]" type="hidden" value="0" />
  <input type="checkbox" value="1" name="agent[womanizer]" id="agent_womanizer" />

  <input type="submit" name="commit" value="Save Agent" />
</form>

```

Remember the intital question that the Slim core team is guided by: “What's the minimum required to make this work?” When you look at the final HTML output, I guesss it’s fair to say that Slim has answered that question quite successfully—no complaints on my end. I wanna throw in a couple more small examples to give you more opportunity to get used to how this looks in Slim.

This ERB snippet …

``` erb

<%= render "shared/agents", collection: @agents %>

```

… becomes this in Slim:

``` slim

= render "shared/agents", collection: @agents

```

ERB:

``` erb

<h2>Agents</h2>
<ul>
  <% @agents.each do |agent| %>
    <li class='agent'>
      <div>Name: <%=            agent.name %></div>
      <div>Number: <%=          agent.number %></div>
      <div>Licence to kill: <%= agent.licence_to_kill %></div>
    </li>
  <% end %>
</ul>

```

Slim:

``` slim

h2 Agents
ul
  - @agents.each do |agent|
    li.agent
      div
        | Name: 
        = agent.name
      div
        | Number: 
        = agent.number
      div
        | Licence to kill: 
        = agent.licence_to_kill

```

You could also write this a bit more streamlined via interpolation. You don’t wanna go too crazy with that one though. This would look like this then:

Slim:

``` slim

h2 2nd Agents
ul
  - @agents.each do |agent|
    li.agent
      div Name:            #{agent.name}
      div Number:          #{agent.number}
      div Licence to kill: #{agent.licence_to_kill}

```

### Text Interpolation

I mentioned this before briefly but since it is a form of outputting Ruby code it belongs to this section as well. You can use standard text interpolation from Ruby in your Slim templates as well of course. 

Slim:

``` slim

 h2 Welcome Mr. #{misix_agent.surname}! I expect you to die!

 h2 Welcome Mr. \#{misix_agent.surname}! I expect you to die!

```

HTML:

``` html

<h2>
  Welcome Mr. Bond! I expect you to die!
</h2>

<h2>
  Welcome Mr. \#{misix_agent.surname}! I expect you to die!
</h2>

```

As seen above, a simple leading backslash `\` escapes the interpolation.

### Control Code

One more for the road. Let’s say you want to use a couple of conditionals in your view. Similar to Haml, you signify Ruby code that is not supposed to be outputted onto the page by a simple dash ```-```. You have seen this in the example above where we used that to iterate over ```@agents``` without displaying that particlar part of the code. Although you should try to stay away from all kinds of conditionals in your views where possible and try to find better OOP solutions for such cases—which is a story for another time—they would look something like this:

Slim:

``` slim

- if current_user.role == "admin"
  p#admintxt | Welcome back my master!
  = link_to "Edit Profile", edit_user_path(:current)
  = link_to "Logout",       logout_path
- elsif current_user
  = link_to "Edit Profile", edit_user_path(:current)
  = link_to "Logout",       logout_path
- else
  = link_to "Register",     new_user_path
  = link_to "Login",        login_path

```

ERB:

``` erb

<% if current_user.role == "admin" %>
  <p id="admintxt">Welcome back my master!</p>
  <%= link_to "Edit Profile", edit_user_path(:current) %>
  <%= link_to "Logout",       logout_path %>
<% elsif current_user %>
  <%= link_to "Edit Profile", edit_user_path(:current) %>
  <%= link_to "Logout",       logout_path %>
<% else %>
  <%= link_to "Register",     new_user_path %>
  <%= link_to "Login",        login_path %>
<% end %>

```

If you want to output code without HTML escaping in place, just use two equals sign ```==```. That’s it!

Before we move on, I definitely should take the time to mention this: As you are hopefully aware of, tons of view code—aka tons of Ruby code in our context—is a serious smell and should be minimized at all times. Just because Slim makes it maybe even more enticing to plaster your templates with tons of logic, does not mean that you should. Practice constraint in that department! Done right on the other hand, Slim makes it really elegant to inject Ruby where needed.

## Inline HTML

If you feel the need to write HTML in your Slim templates you have the option to. I haven’t used that feature nor would I care to use it but maybe during a transitional phase this could be helpful for newcomers. Let’s have a super quick look.

Slim:

``` slim

doctype html
<html>
  head
    title = full_title(yield(:title))
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' => true
    = javascript_include_tag 'application', 'data-turbolinks-track' => true
    = csrf_meta_tags
  <body>
    header.navbar
      .logo
        = link_to "sample app", 'root_path', id: "logo"
        <nav>
          ul.navbar-right
            li
              = link_to "Home",   'root_path'
            li
              = link_to "Help",   'help_path'
            li
              = link_to "Log in", 'login_path'
        </nav>
    .main
      = yield
  </body>
</html>

```

When Slim encounters the left angle bracket ```<```, it knows that you want to mix in some HTML. 

## Verbatim Text (Word for Word)

The pipe character ```|``` signals Slim that you want to have plain text—word for word—and just copies the line. In effect, this let’s you avoid any kind of processing. The documentation says that if you want to write verbatim text over multiple lines, you have to indent the text with each line break.

Slim:

``` slim

body
  p
    | 
      Slim is my new best friend. Slim is my new best friend.

```


HTML Output:

``` html

<body>
  <p>
    Slim is my new best friend. Slim is my new best friend.
  </p>
</body>

```

Screenshot:

{% img /images/Slim/verbatim-text-screenshot.png %}

If you put the text on the same line as the pipe character, you can set the left margin after the pipe plus one single space. Out of curiosity, I fooled a bit around with this and found the following results. Only the last example variation has a little obvious hiccup you should be aware of—it swallows the first word of the sentence. 

Slim:

``` slim

body
  p
    | 
      This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
            And so on...

  p
    | This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
            And so on...

  p This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
            And so on...

  p This line is on the left margin.
    This line will have one space in front of it.
    This line will have two spaces in front of it.
    And so on...

  p
    This line is on the left margin.
    This line will have one space in front of it.
    This line will have two spaces in front of it.
    And so on...

```

Screenshot:

{% img /images/Slim/multiple-verbatim-text-screenshot.png %}

The output how it’s rendered into your HTML markup differs a bit.

``` html

<body>
    <p>
      This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
            And so on...
    </p>

    <p>
      This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
           And so on...
    </p>
    <p>
      This line is on the left margin.
         This line will have one space in front of it.
           This line will have two spaces in front of it.
             And so on...
    </p>
    <p>
      This line is on the left margin.
      This line will have one space in front of it.
      This line will have two spaces in front of it.
      And so on...
    </p>
    <p>
      <This>line is on the left margin.</This><This>line will have one space in front of it.</This><This>line will have two spaces in front of it.</This><And>so on...</And>
    </p>
  </body>

```

## Comments

Of course it’s necessary to comment out your code every once in a while. Don’t forget though that too many comments are a smell as well. Just try to keep it to an absolute minimum!
A forward slash ```/``` is all you need to comment out any code.

Slim:

``` slim

body
  /p
    | This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
           And so on...


```

Boom! And now this paragraph is gone from the page. This comment leaves no trace in the final HTML markup. You just need to apply it to the parent selector and all its children will be commented out as well. So, even comments are slim and minimal.

If on the other hand you want some HTML comment ```<!--  -->``` that shows up in the final output rendered, you just need to add an exclamation mark ```!``` after the slash.

``` slim

body
  /!p
    | This line is on the left margin.
       This line will have one space in front of it.
         This line will have two spaces in front of it.
           And so on...


```

HTML Output:

``` html

<body>
  <!--p
      | This line is on the left margin.
        This line will have one space in front of it.
          This line will have two spaces in front of it.
            And so on...-->

```

Neat!

## Custom Shortcuts

We have been using shortcuts all along. When you type a dot ```.``` or a hash symbol ```#``` you tell Slim that you want to use predefined shortcuts for classes and ids. That’s certainly a very nice default but what can you do to expand on that and create your own little snippety snippets. We can do this for tags and attributes alike. Welcome to the awesomeness of Slim!

In Rails we just need to set up an initializer with the following pattern:

#### config/initializers/slim.rb

``` ruby

Slim::Engine.set_options shortcut: {'c' => {tag: 'container'}, '#' => {attr: 'id'}, '.' => {attr: 'class'} }

```

In Sinatra apps, you simply add the same configuration anywhere below the line where you `require 'slim'`.

##### your_sinatra_app.rb

``` ruby

require 'sinatra'
require 'slim'

Slim::Engine.set_options shortcut: {'c' => {tag: 'container'}, '#' => {attr: 'id'}, '.' => {attr: 'class'} }

get('/') { slim :index }

__END__

@@ index
doctype html
html
  head
    title Slim Templates
    body
      h1 Boss Level Templates With Slim

```

You can set options on the Slim::Engine by providing a hash with the shortcut you need. In the example above, we instrucuted Slim to use ```c``` as a shortcut for a ```container``` tag. You would use it like this in your Slim files:

Slim:

``` slim

c.content Now you have a container tag with a .content class.

```

And the rendered HTML would look like this of course:

HTML:

``` html

<container class="content">
  Now you have a container tag with a .content class.
</container>

```

Pretty nice huh? But you didn’t think that’s where the music stops, did you? We can take this further than that. Let me give you an example that is a bit more involved:

#### config/initializers/slim.rb

``` ruby

Slim::Engine.set_options shortcut: {
            '#' => {attr: 'id'},
            '.' => {attr: 'class'},
            'c' => {tag: 'container'},
            '&' => {tag: 'input', attr: 'type'}, 
            '@' => {attr: 'role'},
            '^' => {attr: %w(data-role role)}
           }

```

In this example I did not only create a custom tags but also provided handy custom attributes. Let’s dissect this step by step. Btw, I broke the options hash over several lines to keep it readable and to avoid having a long line of code that nobody likes to stumble upon. Reads much nicer, don’t you think?

Via the ampersand symbol ```&```, we can now create an input tag and we just need to feed it a type—which immediately follows the ampersand. Btw, we can use any symbol that makes sense to use. No need to use the same that I did. Be careful though and try to make uncompromising decisions in that department.

Slim:

``` slim

&text name="user"
&password name="pw"
&submit

```

HTML Output:

``` html

<input name="user" type="text">
<input name="pw" type="password">
<input type="submit">

```

When you make changes to this initializer with your custom shortcuts you shouldn’t forget to restart your local server. Without that your changes won’t be reflected during preprocessing.

Next, if I need a ```role``` attribute, I can now just prefix it with an ```@``` symbol. 

Slim:

``` slim

.person@admin Daniel Mendler 

```

HTML Output:

``` html

<div class="person" role="admin">
  Daniel Mendler
</div>

```

Refresher: The role attribute is a semantic approach to describe the role of the element in question—if you need to determine the purpose of the element.

See, via the dot we get a ```class="person"``` class and the ```@admin``` gave us a ``` role="admin"```. Pretty handy dandy but we can take this one little step further and use an array to specify multiple attributes that should get created via one single shortcut.

Slim:

``` slim

.nifty^hacker CrackDoctor

```

HTML Output:

``` html

<div class="nifty" data-role="hacker" role="hacker">
  CrackDoctor
</div>

```

Because we associated an array of attributes for our ```^``` shortcut, Slim creates ```data-role``` and ```role``` attributes simultaneously via a single symbol. That can come in pretty handy. Imagine if you want to output an element similar to the following and can do it concise with shortcut and some Ruby code.

HTML

``` html

<source src="track1.mp3" type="audio/mpeg" data-duration="1min5secs" data-tempo="125bpm" data-artist="The Beatles" />

```

Writing all of this by hand seems not the best use of your time—we have code to do that job for us. Well, there you have it, that’s all you need to know to create your own set of awesome shortcuts—or to create a big mess when you don’t practice a bit of constraint. I would recommend to not go overboard with this—especially try to stay away from defining shortcuts that use symbols that Slim is already attached to. 

Refresher: The data- attributes are used to have some private data on your page / application. Stuff that helps you filter content for example. They are custom attributes which can be used on all HTML elements. Using them for JavaScript purposes is another common practice. It is also very handy for testing elements on a page if you want to make sure that particular elements show up and you want to avoid that designers mess with your styles.

## Configuring Slim

Before you leave, I wanted to show you a little sneak peek into the vast configuration options and how you apply them. For Rails, you’d create an enviromnent file like `config/environments/development.rb` and specify the options you need. You simply place your configuration some place inside the `Rails.application.configure` block. 


``` ruby

Rails.application.configure do
  Slim::Engine.set_options default_tag: 'p', 
                           tabsize: 2, 
                           attr_list_delims: {'(' => ')', 
                                              '[' => ']',
                                              '{' => '}', 
                                              '«' => '»', 
                                              '‹' => '›'
                                              }
end

```

In this configuration I made sure the default tag that gets created if a tag name is omitted is a `<p>` tag—not a `div` tag, which is the standard setting. Also, I adjusted the tabsize to use 2 white spaces and finally added two more delimiters for wrapping attributes of tags. Now I can use `‹ ›` and `« »` as well for that. Not terribly useful but good for demonstration purposes. In the example below, you can see that all delimiters for attribute wrappers create the same output—also that `.some-class` or `#some-id` creates `<p>` tags per default.

Slim:

``` slim

body
  #zeroth
  a{href="http://slim-lang.com" title='Home page'} Goto the home page

  .first
  a[href="http://slim-lang.com" title='Home page'] Goto the home page

  .second
  a(href="http://slim-lang.com" title='Home page') Goto the home page

  .third
  a‹href="http://slim-lang.com" title='Home page'› Goto the home page

  .fourth
  a«href="http://slim-lang.com" title='Home page'» Goto the home page

```

HTML Output:

``` html

<body>
    <p id="zeroth"></p>
    <a href="http://slim-lang.com" title="Home page">Goto the home page</a>

    <p class="first"></p>
    <a href="http://slim-lang.com" title="Home page">Goto the home page</a>

    <p class="second"></p>
    <a href="http://slim-lang.com" title="Home page">Goto the home page</a>

    <p class="third"></p>
    <a href="http://slim-lang.com" title="Home page">Goto the home page</a>

    <p class="fourth"></p>
    <a href="http://slim-lang.com" title="Home page">Goto the home page</a>
</body>

```

Alternatively, you can also set this stuff in `config/initializers/slim.rb` as I showed you in the section about custom shortcuts. For Sinatra it’s the same drill as discussed in the shortcuts section as well. Just set your options somewhere below your `require 'slim'` statement and you are good to go. Take a look at the [documentation](http://www.rubydoc.info/gems/slim/frames#Configuring_Slim) under “Available options” to read more about what is available for configuration. Slim gives you many options to play with.

## Final Thoughts

That’s basically it. There are a one or two more advanced topics that you should dig into if needed but I thought they are mostly not beginner-friendly nor heavily used on a day-to-day basis. I wanted to keep things simple and show you all you need for quickly switching to this awesome, awesome templating engine. Have fun, hope it’s now also one of your favorite new toys!
