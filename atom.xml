<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Drafts Previewer]]></title>
  <link href="http://vis-kid.github.io/octopress_drafts_previewer/atom.xml" rel="self"/>
  <link href="http://vis-kid.github.io/octopress_drafts_previewer/"/>
  <updated>2015-07-09T23:19:40+02:00</updated>
  <id>http://vis-kid.github.io/octopress_drafts_previewer/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bourbon - Functions]]></title>
    <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/15/bourbon-functions/"/>
    <updated>2015-07-15T13:51:46+02:00</updated>
    <id>http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/15/bourbon-functions</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/bourbon-aerator.jpg" width="450" height="260" title="" ></p>

<p><a href="http://bourbon.io/"><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/bourbon-logo@2x.png" width="250" height="450"></a></p>

<h2>Functions</h2>

<p>Bourbon provides very handy Sass functions for a variety of use cases. Let’s take a look at this selection:</p>

<ul>
<li><code>linear-gradient()</code></li>
<li><code>modular-scale()</code></li>
<li><code>golden-ratio()</code></li>
<li><code>shade()</code></li>
<li><code>tint()</code></li>
<li><code>em()</code></li>
</ul>


<!-- more -->


<h2></h2>

<ul>
<li><code>golden-ratio()</code> function</li>
</ul>


<p>With this function, it is very easy to calculate the golden ratio of a certain number (slowly depricated though). It is useful if you want to create “meaningful” relationships within your typography for example. The same goes for structural relationships in your layout.</p>

<h3>FYI: The Golden Ratio</h3>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/bender-golden-ratio.jpg" width="280"></p>

<p>There are two sides to this story. The classical approach to describing the importance of this ratio could be along the following lines:</p>

<p>The golden ratio or “<strong><em>divine proportion</em></strong>” is a very common ratio across disciplines. In music, art, mathematics, architecture, biology and in many other fields you can encounter the &ldquo;use&rdquo; of the ratio <strong>1 : 1.6180339</strong> to tie structures together. Interestingly, in the past, especially in early architecture, it was often used to please the &ldquo;gods&rdquo; by attempting to &ldquo;communicate&rdquo; in a &ldquo;divine geometric language&rdquo;.</p>

<p>This ratio represents a pattern that seems to please human visual perception, probably because it’s been so abundant in biology around us all along. Therefore we supposedly perceive some kind of inherent balance when confronted with it. For ages, applying this ratio was seen as an old &ldquo;trick&rdquo; used by creators because it can make your work feel more <strong>harmonious</strong> or even &ldquo;natural&rdquo;.</p>

<h3>Twitter’s use of the golden ratio for its layout</h3>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/goldentwitter.jpg" width="580"></p>

<p>In design the use of the <strong><em>golden mean</em></strong> is widespread as well:</p>

<ul>
<li>Layouts in Webdesign</li>
<li>iPods / iPhones</li>
<li>Business cards</li>
<li>Credit cards</li>
<li>Tyography</li>
<li>Postcards</li>
<li>Logos</li>
<li>Cars</li>
</ul>


<p>&hellip;and <a href="http://en.wikipedia.org/wiki/List_of_works_designed_with_the_golden_ratio">many more</a></p>

<p>On the other hand, you are also encouraged to doubt the tremendous reputation the golden ratio has earned over the centuries. Check out this controversial <a href="http://www.fastcodesign.com/3044877/the-golden-ratio-designs-biggest-myth">article</a> if you want to whet your appetite. The tl;dr version is that it’s supposed to be bullshit and a very old scam. Maybe still useful and effective, but simply nonsense projected onto an irrational number.</p>

<p>At Stanford hundreds of students were asked over the years about their preference of the golden ratio. The Haas School of Business in Berkeley did something similar. The conclusion was that in the real world people don’t prefer the golden ratio. I’ll leave you with that and you can decide for yourself if “divine” is really what we should call this proportion that is supposedly the universal formula behind aesthetic beauty. Maybe another case where we try to find meaning in the patterns out there.</p>

<h3>The golden ratio for your typographic scale</h3>

<p>If you want to generate a <a href="http://www.hyperarts.com/blog/how-to-use-a-modular-scale/">modular scale</a> to structure various sizes of type by using the golden ratio, you can apply the <strong>goden-ratio function</strong> to calculate the <strong>golden mean</strong> for any number. Building your <strong>typographic scale</strong> is straightforward:</p>

<figure class='code'><figcaption><span>typographic scale using the golden ratio</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">$base-font-size</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nv">$base-font-size</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.footnote</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nf">golden-ratio</span><span class="p">(</span><span class="nv">$base-font-size</span><span class="o">,</span> <span class="mi">-1</span><span class="p">)</span>
</span><span class='line'>                                        <span class="c1">// decrement value</span>
</span><span class='line'><span class="nt">h3</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nf">golden-ratio</span><span class="p">(</span><span class="nv">$base-font-size</span><span class="o">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                                        <span class="c1">// increment value</span>
</span><span class='line'><span class="nt">h2</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nf">golden-ratio</span><span class="p">(</span><span class="nv">$base-font-size</span><span class="o">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h1</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nf">golden-ratio</span><span class="p">(</span><span class="nv">$base-font-size</span><span class="o">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  $base-font-size: 10px;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">body {</span>
</span><span class='line'>      <span class="c1">font-size: $base-font-size;</span>
</span><span class='line'>    <span class="c1">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">.footnote {</span>
</span><span class='line'>      <span class="c1">font-size: golden-ratio($base-font-size, -1);</span>
</span><span class='line'>    <span class="c1">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">h3 {</span>
</span><span class='line'>      <span class="c1">font-size: golden-ratio($base-font-size, 1);</span>
</span><span class='line'>    <span class="c1">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">h2 {</span>
</span><span class='line'>      <span class="c1">font-size: golden-ratio($base-font-size, 2);</span>
</span><span class='line'>    <span class="c1">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">h1 {</span>
</span><span class='line'>      <span class="c1">font-size: golden-ratio($base-font-size, 3);</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>CSS output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.footnote</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">6.18px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h3</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">16.18px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">26.179px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">42.358px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function’s first parameter expects a <strong>pixel</strong> or <strong>em</strong> value — here represented by a Sass variable defined above. The second parameter requires an integer as <strong>increment / decrement value</strong> (&hellip;-3, -2, -1, 0, 1, 2, 3&hellip;) for scaling the provided font-size using <strong>1.6180339</strong>.
If you need to round the output, you can use Sass’s functions for:</p>

<h3><strong>abs()</strong> — <strong>floor()</strong> — <strong>ceil()</strong></h3>

<figure class='code'><figcaption><span>rounded example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.footnote</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nf">floor</span><span class="p">(</span> <span class="nf">golden-ratio</span><span class="p">(</span><span class="nv">$base-font-size</span><span class="o">,</span> <span class="mi">-1</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  .footnote {</span>
</span><span class='line'>      <span class="c1">font-size: floor( golden-ratio($base-font-size, -1) );</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Under The Hood</h3>

<p>Internally the golden-ratio function is using the <strong>modular-scale function</strong> with the scaling variable <strong>$golden</strong> for golden-ratio.</p>

<figure class='code'><figcaption><span>modular-scale mixin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@function</span> <span class="nt">golden-ratio</span><span class="o">(</span><span class="err">$</span><span class="nt">value</span><span class="o">,</span> <span class="err">$</span><span class="nt">increment</span><span class="o">)</span> <span class="err">{</span>
</span><span class='line'>  <span class="k">@return</span> <span class="nt">modular-scale</span><span class="o">(</span><span class="err">$</span><span class="nt">value</span><span class="o">,</span> <span class="err">$</span><span class="nt">increment</span><span class="o">,</span> <span class="err">$</span><span class="nt">golden</span><span class="o">)</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Btw the fantastic <a href="http://neat.bourbon.io">Bourbon Neat</a> grid framework also uses the golden ratio by default for <strong>gutters</strong> and <strong>columns</strong>.</p>

<h2></h2>

<ul>
<li><h3><strong>modular-scale() function</strong></h3></li>
</ul>


<p>If you are into <a href="http://www.alistapart.com/article/more-meaningful-typography">&ldquo;<em>more meaningful typography</em>&rdquo;</a> and want to calculate a modular scale for various font sizes that have some sort of numerical relationship, this function might be interesting to you.
It offers to calculate various modular scales for you — the golden ratio is just one out of <strong>17 options</strong>, excluding your very own made up scales of course.</p>

<figure class='code'><figcaption><span>modular-scale example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">$base-font-size</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span>
</span><span class='line'><span class="c1">// Your choice of ratio saved in a variable to change it in one place</span>
</span><span class='line'><span class="c1">// Here I used the double-octave ratio</span>
</span><span class='line'><span class="na">$type-of-scale</span><span class="o">:</span> <span class="nv">$double-octave</span>
</span><span class='line'>
</span><span class='line'><span class="nt">body</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nv">$base-font-size</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.footnote</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nf">modular-scale</span><span class="p">(</span><span class="nv">$base-font-size</span><span class="o">,</span> <span class="mi">-1</span><span class="o">,</span> <span class="nv">$type-of-scale</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h3</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nf">modular-scale</span><span class="p">(</span><span class="nv">$base-font-size</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="nv">$type-of-scale</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h2</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nf">modular-scale</span><span class="p">(</span><span class="nv">$base-font-size</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="nv">$type-of-scale</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h1</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nf">modular-scale</span><span class="p">(</span><span class="nv">$base-font-size</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="nv">$type-of-scale</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  $base-font-size: 10px;</span>
</span><span class='line'>    <span class="c1">$type-of-scale: $double-octave;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">body {</span>
</span><span class='line'>      <span class="c1">font-size: $base-font-size;</span>
</span><span class='line'>    <span class="c1">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">.footnote {</span>
</span><span class='line'>      <span class="c1">font-size: modular-scale($base-font-size, -1, $type-of-scale);</span>
</span><span class='line'>    <span class="c1">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">h3 {</span>
</span><span class='line'>      <span class="c1">font-size: modular-scale($base-font-size, 1, $type-of-scale);</span>
</span><span class='line'>    <span class="c1">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">h2 {</span>
</span><span class='line'>      <span class="c1">font-size: modular-scale($base-font-size, 2, $type-of-scale);</span>
</span><span class='line'>    <span class="c1">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">h1 {</span>
</span><span class='line'>      <span class="c1">font-size: modular-scale($base-font-size, 3, $type-of-scale);</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Scaling Variables</h3>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/scaling-variables.png" width="350"></p>

<p>Bourbon prepared these <strong>variables</strong> of <strong>predefined ratios for various scales</strong>. To create a consistent design, it would be a good decsision not to mix different ratios for your typographic scale in one project. Keep it classy by deciding on one ratio that mirrors your intentions best.</p>

<h3>Attention!</h3>

<p>To use these scaling variables you need to install a version of Bourbon higher than <strong>v3.1.8</strong>.
As of Feb 2014, I’d recommend updating to the beta with</p>

<ul>
<li>tag

<ul>
<li><strong>v3.2.0-beta.1</strong><br/>
or</li>
<li><strong>v3.2.0-beta.2</strong></li>
</ul>
</li>
</ul>


<p>Put this in your gemfile to directly update from Github:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;bourbon&#39;</span><span class="p">,</span> <span class="ss">git</span><span class="p">:</span> <span class="s1">&#39;https://github.com/thoughtbot/bourbon.git&#39;</span><span class="p">,</span> <span class="ss">tag</span><span class="p">:</span> <span class="s1">&#39;v3.2.0-beta.2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and of course</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>Otherwise the variables above will throw an error. Of course you can just type in any desired ratio as the third parameter yourself.</p>

<figure class='code'><figcaption><span>without scaling variables</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">$base-font-size</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h2</span>
</span><span class='line'>  <span class="na">font-size</span><span class="o">:</span> <span class="nf">modular-scale</span><span class="p">(</span><span class="nv">$base-font-size</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="mf">.6180</span><span class="p">)</span>
</span><span class='line'>                                            <span class="c1">// golden ratio</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  $base-font-size: 10px;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">h2 {</span>
</span><span class='line'>      <span class="c1">font-sizse: modular-scale($base-font-size, 2, 1.6180);</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h2></h2>

<ul>
<li><h3><strong>linear-gradient()</strong> function</h3></li>
</ul>


<p>If you need a linear gradient in combination with your background-image mixin, this function will save you quite a bit of code. The color of the gradient is defined by the <strong>starting color</strong>, the <strong>ending color</strong> and optional <strong>stop-color points</strong> in between. Those additional color-stops give you the possiblity to create more sophisticated transitions between the starting and ending colors, or provide a more colorful gradient.</p>

<p>Take a look at this horrible gradient. Here I think it’s easy to see how the <strong>linear-gradient</strong> function works and how you can utilize it:</p>

<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/horrible-gradient.png"></p>

<figure class='code'><figcaption><span>horrible linear-gradient</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.horrible-gradient</span>
</span><span class='line'>  <span class="nd">+background-image</span><span class="p">(</span><span class="nf">linear-gradient</span><span class="p">(</span>
</span><span class='line'>    <span class="nt">45deg</span><span class="o">,</span>                <span class="o">//</span> <span class="nt">directon</span> <span class="nt">of</span> <span class="nt">gradient</span> <span class="nt">line</span>
</span><span class='line'>    <span class="nt">red</span> <span class="nt">10</span><span class="err">%</span><span class="o">,</span>              <span class="o">//</span> <span class="nt">starting</span> <span class="nt">color</span>
</span><span class='line'>    <span class="nt">yellow</span> <span class="nt">15</span><span class="err">%</span><span class="o">,</span>   <span class="o">//</span> <span class="nt">S</span>    <span class="o">//</span> <span class="nt">bleeds</span> <span class="nt">into</span> <span class="nt">red</span>
</span><span class='line'>    <span class="nt">yellow</span> <span class="nt">40</span><span class="err">%</span><span class="o">,</span>   <span class="o">//</span> <span class="nt">T</span>
</span><span class='line'>    <span class="nt">orange</span> <span class="nt">45</span><span class="err">%</span><span class="o">,</span>   <span class="o">//</span> <span class="nt">O</span>    <span class="o">//</span> <span class="nt">bleeds</span> <span class="nt">into</span> <span class="nt">yellow</span>
</span><span class='line'>    <span class="nt">orange</span> <span class="nt">50</span><span class="err">%</span><span class="o">,</span>   <span class="o">//</span> <span class="nt">P</span>
</span><span class='line'>    <span class="nt">orange</span> <span class="nt">70</span><span class="err">%</span><span class="o">,</span>   <span class="o">//</span> <span class="nt">S</span>    <span class="o">//</span> <span class="nt">bleeds</span> <span class="nt">into</span> <span class="nt">green</span>
</span><span class='line'>    <span class="nt">green</span> <span class="nt">90</span><span class="err">%</span><span class="o">)</span>            <span class="o">//</span> <span class="nt">ending</span> <span class="nt">color</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>    <span class="na">height</span><span class="o">:</span> <span class="mi">50</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  .horrible-gradient {</span>
</span><span class='line'>      <span class="c1">@include background-image(linear-gradient( </span>
</span><span class='line'>        <span class="c1">45deg,                // directon of gradient line </span>
</span><span class='line'>        <span class="c1">red 10%,              // starting color </span>
</span><span class='line'>        <span class="c1">yellow 15%,   // S    // bleeds into red     </span>
</span><span class='line'>        <span class="c1">yellow 40%,   // T                           </span>
</span><span class='line'>        <span class="c1">orange 45%,   // O    // bleeds into yellow   </span>
</span><span class='line'>        <span class="c1">orange 50%,   // P                            </span>
</span><span class='line'>        <span class="c1">orange 70%,   // S    // bleeds into green    </span>
</span><span class='line'>        <span class="c1">green 90%)            // ending color</span>
</span><span class='line'>      <span class="c1">)                      </span>
</span><span class='line'>        <span class="c1">height: 50px</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<p>For colors you can optionally provide <strong>precentage</strong>, <strong>pixel</strong> or <strong>em</strong> <strong>values</strong>. Those define the distance this color is supposed to stretch out. You should probably stick to using <strong><em>%</em></strong> most of the time though. If you don’t provide percentages as limitation values, the colors will strech out evenly, divided by the number of colors in the gradient.
You can optionally provide an angle for the first parameter — either in form of <strong>value</strong> + <strong>deg</strong> or
<strong>to</strong> with <strong>direction</strong>:</p>

<ul>
<li>45deg</li>
<li>90deg</li>
<li>to left top</li>
<li>to right</li>
<li>to left</li>
</ul>


<p>and so on.</p>

<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/yellow-blue-gradient.png"></p>

<p>The gradient flows from left to right</p>

<figure class='code'><figcaption><span>with direction parameter — left to right</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.gradient</span>
</span><span class='line'>  <span class="nd">+background-image</span><span class="p">(</span><span class="nf">linear-gradient</span><span class="p">(</span><span class="n">to</span> <span class="no">right</span><span class="o">,</span> <span class="nb">yellow</span> <span class="mi">50</span><span class="kt">%</span><span class="o">,</span> <span class="nb">blue</span> <span class="mi">60</span><span class="kt">%</span><span class="p">))</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">50</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  .gradient {</span>
</span><span class='line'>      <span class="c1">@include background-image(linear-gradient(to right, yellow 50%, blue 60%)); </span>
</span><span class='line'>      <span class="c1">height: 50px;</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/hsla-gradient.png"></p>

<p>Something more sophisticated using <strong>hsla()</strong> functions and multiple <strong>linear-gradient()</strong> functions:</p>

<figure class='code'><figcaption><span>decent gradient</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.gradient</span>
</span><span class='line'>  <span class="nd">+background-image</span><span class="p">(</span><span class="nf">linear-gradient</span><span class="p">(</span>
</span><span class='line'>    <span class="nt">hsla</span><span class="o">(</span><span class="nt">0</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">0</span><span class="nc">.25</span><span class="o">)</span> <span class="nt">0</span><span class="err">%</span><span class="o">,</span>
</span><span class='line'>    <span class="nt">hsla</span><span class="o">(</span><span class="nt">0</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">0</span><span class="nc">.08</span><span class="o">)</span> <span class="nt">50</span><span class="err">%</span><span class="o">,</span> <span class="nt">transparent</span> <span class="nt">50</span><span class="err">%</span><span class="o">),</span>
</span><span class='line'>    <span class="nt">linear-gradient</span><span class="o">(</span><span class="nn">#4e7ba3</span><span class="o">,</span> <span class="nt">darken</span><span class="o">(</span><span class="nn">#4e7ba4</span><span class="o">,</span> <span class="nt">10</span><span class="err">%</span><span class="o">)))</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">50</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  .gradient </span>
</span><span class='line'>      <span class="c1">+background-image(linear-gradient(</span>
</span><span class='line'>        <span class="c1">hsla(0, 100%, 100%, 0.25) 0%, </span>
</span><span class='line'>        <span class="c1">hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), </span>
</span><span class='line'>        <span class="c1">linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)))</span>
</span><span class='line'><span class="c1">//    height: 50px</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tint &amp; Shade Color Functions</h2>

<p>You might already be familiar with Sass’s built in functions for colors like <code>lighten()</code> and <code>darken()</code> which do exactly what you’d expect. Bourbon provides two additional awesome color functions for your convenience. Both functions take a color and percentage parameter to fine-tune the color mix.</p>

<ul>
<li><h3><strong>tint() function</strong></h3></li>
</ul>


<p>The tint function changes a color by mixing it with <strong>white</strong>.
It expects a second parameter that takes the <strong>percentage of white</strong> you want to mix the color with.</p>

<figure class='code'><figcaption><span>tint()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.tint</span>
</span><span class='line'>  <span class="na">background</span><span class="o">:</span> <span class="nf">tint</span><span class="p">(</span><span class="mh">#2F7DD1</span><span class="o">,</span> <span class="mi">25</span><span class="kt">%</span><span class="p">)</span>                                                               <span class="no">height</span><span class="o">:</span> <span class="mi">100</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  .tint {</span>
</span><span class='line'>      <span class="c1">background: tint(#2F7DD1, 25%)                                                               height: 100px</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Without tint()</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/no-tint.png"></p>

<h4>With tint()</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/tint.png"></p>

<h2></h2>

<ul>
<li><h3><strong>shade() function</strong></h3></li>
</ul>


<p>The shade function changes a color by mixing it with <strong>black</strong>.
This function also takes a <strong>color</strong> and <strong>percentage</strong> parameter to fine-tune the color mix.</p>

<figure class='code'><figcaption><span>shade()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.shade</span>
</span><span class='line'>  <span class="na">background</span><span class="o">:</span> <span class="nf">shade</span><span class="p">(</span><span class="mh">#2F7DD1</span><span class="o">,</span> <span class="mi">25</span><span class="kt">%</span><span class="p">)</span>                                                              <span class="no">height</span><span class="o">:</span> <span class="mi">100</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  .shade{</span>
</span><span class='line'>      <span class="c1">background: shade(#2F7DD1, 25%)                                                              height: 100px</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Without shade()</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/no-tint.png"></p>

<h4>With shade()</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/shade.png"></p>

<h2></h2>

<ul>
<li><h3><strong>em() function</strong></h3></li>
</ul>


<p>Calculates <strong>pixels to ems</strong> for you.</p>

<figure class='code'><figcaption><span>em function in a Sass file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">:q</span>
</span><span class='line'><span class="na">:q</span>
</span><span class='line'><span class="na">font-size</span><span class="o">:</span> <span class="nf">em</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>css output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">font-size</span><span class="o">:</span> <span class="nt">0</span><span class="nc">.75em</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2></h2>

<p>That’s it for Bourbon for now. Over the last couple of articles we have looked in detail at mixins &amp; functions and covered a lot of ground. I hope I could convey how awesome this project is and why it deserves a lot of respect.</p>

<p>Now feel free to scheme how to take over the world with it.</p>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-functions/scheming.gif" width="700"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bourbon - Mixins #02]]></title>
    <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/10/bourbon-mixins-02/"/>
    <updated>2015-07-10T16:23:35+02:00</updated>
    <id>http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/10/bourbon-mixins-02</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/bourbon-mixins02.jpg" width="550"></p>

<p><a href="http://bourbon.io/"><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/bourbon-logo@2x.png" width="250" height="450"></a></p>

<h2>Another Short List Of Goodies</h2>

<ul>
<li><a href="#inline-block"><strong>inline-block mixin</strong></a></li>
<li><a href="#position"><strong>position mixin</strong></a></li>
<li><a href="#triangle"><strong>triangle mixin</strong></a></li>
<li><a href="#clearfix"><strong>clearfix mixin</strong></a></li>
<li><a href="#button"><strong>button mixin</strong></a></li>
<li><a href="#size"><strong>size mixin</strong></a></li>
<li><a href="#hidpi"><strong>HiDPI-media-query mixin</strong></a></li>
<li><a href="#retina"><strong>retina-image mixin</strong></a></li>
</ul>


<p>Let’s take a look at these mixins in more detail as well.</p>

<!-- more -->


<p><em>Examples below represent not necessarily best design practices but are chosen for exploring the basic functionality of these mixins.</em></p>

<h2></h2>

<ul>
<li><h2><a name='inline-block'></a>inline-block mixin</h2></li>
</ul>


<figure class='code'><figcaption><span>paragraphs’ default display behaviour is block</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&#39;paragraphs-behave-like-blocks&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    Yada yada yada
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&#39;paragraphs-behave-like-blocks&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    Yada yada yada
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/display-block.png"></p>

<p>Block-level elements, like paragraphs, automatically create a new row in the layout.</p>

<p>This mixin comes in handy if you want to change the <strong>default display behaviour</strong> of elements to <strong>inline-block</strong>, instead of floating elements for example. It not only sets <strong>display: inline-block</strong> but also takes care of quirks and legacy support for IE7.</p>

<p>Learn more about <a href="http://designshack.net/articles/css/whats-the-deal-with-display-inline-block/">display</a> here.</p>

<figure class='code'><figcaption><span>blocks with float-like behaviour through inline-block</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.paragraphs-behave-like-blocks</span>
</span><span class='line'>  <span class="nd">+inline-block</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">tomato</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'><span class="c1">//  .paragraphs-behave-like-blocks {</span>
</span><span class='line'>      <span class="c1">@include inline-block;</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take a look at the generated CSS output. Who wants to remember nasty stuff like that.</p>

<figure class='code'><figcaption><span>CSS output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.paragraphs-behave-like-blocks</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">vertical-align</span><span class="o">:</span> <span class="k">baseline</span><span class="p">;</span>
</span><span class='line'>  <span class="n">zoom</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="k">vertical-align</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">tomato</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/display-block-inline.png" width="400"></p>

<p>Set to display: inline-block, the paragraphs get displayed inline but retain their block-level characteristics. Alternative to floating elements — Check!</p>

<h3>Attention</h3>

<p>Notice the whitespace between the block elements. If you’d be using <strong>float</strong>, you wouldn’t see any whitespace. It’s a kind of default whitespace that doesn’t go away by setting margins to 0px. Instead set <strong>margins to -4px</strong> if you want to get rid of it.</p>

<h2></h2>

<ul>
<li><h2><a name='position'></a>position mixin</h2></li>
</ul>


<p>This mixin is a shorthand for writing something like this —</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.some-element</span>
</span><span class='line'>  <span class="na">position</span><span class="o">:</span> <span class="no">relative</span>
</span><span class='line'>  <span class="na">top</span><span class="o">:</span> <span class="mi">0</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">left</span><span class="o">:</span> <span class="mi">100</span><span class="kt">px</span>
</span></code></pre></td></tr></table></div></figure>


<p>— in just one line</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.some-element</span>
</span><span class='line'>  <span class="nd">+position</span><span class="p">(</span><span class="no">relative</span><span class="o">,</span> <span class="mi">0</span><span class="kt">px</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">100</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>                    <span class="c1">//top right bottom left</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'>   <span class="c1">.some-element</span>
</span><span class='line'><span class="c1">//   @include position(relative, 0px 0 0 100px);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s it. No magic, but still super useful. Keeping stylesheets simple and readable pays off over time.</p>

<h2></h2>

<ul>
<li><h2><a name='triangle'></a>triangle mixin</h2></li>
</ul>


<p>Want to use CSS <strong>triangles</strong> without fiddling around? There is certainly no need to use images for the job.</p>

<p>It’s easy as pie with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.triangle</span>
</span><span class='line'>  <span class="nd">+triangle</span><span class="p">(</span><span class="mi">25</span><span class="kt">px</span><span class="o">,</span> <span class="ni">tomato</span><span class="o">,</span> <span class="n">down</span><span class="p">)</span>
</span><span class='line'>         <span class="c1">// size, color, direction</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'>   <span class="c1">.triangle {</span>
</span><span class='line'>     <span class="c1">@include triangle(25px, tomato, down);</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<p>The third parameter defines the direction.
Options for this mixin include:</p>

<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/triangles.png" width="400"></p>

<p><strong>down</strong> — <strong>up</strong> — <strong>left</strong> — <strong>right</strong></p>

<p><strong>up-right</strong> — <strong>up-left</strong> — <strong>down-right</strong> — <strong>down-left</strong></p>

<p>You can even define a second color if you need a background color for your triangle.</p>

<h2></h2>

<ul>
<li><h2><a name='clearfix'></a>clearfix mixin</h2></li>
</ul>


<p>Wrappers that have floated elements inside have the <a href="http://complexspiral.com/publications/containing-floats/"><strong>zero-height container problem</strong></a> — in essence the container element inflates to zero pixels if all its elements inside are floated and therefore taken out of the containers <em>flow</em>, which leaves nothing left to fill the container -> inflates to zero.</p>

<p>The clearfix mixin takes care of this when <strong>applied to the container / wrapper element</strong>. The best thing about this is that it doesn’t require addional &ldquo;empty&rdquo; markup to accomodate the clearfix. It stays semantic by just adding the clearfix in your stylesheets.</p>

<p>Take a look at this very simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;grey-wrapper&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;logos&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">$light-grey</span><span class="o">:</span> <span class="mh">#D4D4D4</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.grey-wrapper</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nv">$light-grey</span>
</span><span class='line'>  <span class="nd">+clearfix</span>
</span><span class='line'>  <span class="nc">.logos</span>
</span><span class='line'>    <span class="na">float</span><span class="o">:</span> <span class="no">right</span>
</span><span class='line'>    <span class="nd">+background-image</span><span class="p">(</span><span class="sx">url(&quot;bourbon-logo@2x.png&quot;)</span><span class="o">,</span> <span class="sx">url(&quot;thoughtbot.png&quot;)</span><span class="p">)</span>
</span><span class='line'>    <span class="na">background-position</span><span class="o">:</span> <span class="no">center</span> <span class="no">top</span><span class="o">,</span> <span class="no">top</span> <span class="no">left</span>
</span><span class='line'>    <span class="na">background-repeat</span><span class="o">:</span> <span class="no">repeat-y</span><span class="o">,</span> <span class="no">repeat-x</span>
</span><span class='line'>    <span class="na">height</span><span class="o">:</span> <span class="mi">220</span><span class="kt">px</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="mi">50</span><span class="kt">%</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// .grey-wrapper {</span>
</span><span class='line'>     <span class="c1">@include clearfix;</span>
</span><span class='line'>     <span class="c1">background-color: $light-grey;</span>
</span><span class='line'>     <span class="c1">.logos {</span>
</span><span class='line'>       <span class="c1">float: right;</span>
</span><span class='line'>       <span class="c1">@include background-image(url(&quot;bourbon-logo@2x.png&quot;), url(&quot;thoughtbot.png&quot;));</span>
</span><span class='line'>       <span class="c1">background-position: center top, top left;</span>
</span><span class='line'>       <span class="c1">background-repeat: repeat-y, repeat-x;</span>
</span><span class='line'>       <span class="c1">height: 220px;</span>
</span><span class='line'>       <span class="c1">width: 50%;</span>
</span><span class='line'>     <span class="c1">}</span>
</span><span class='line'><span class="c1">// } </span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using clearfix</h3>

<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/with-clearfix.png"></p>

<p>The grey container expands to hold the floated logos in it.</p>

<h3>Without clearfix</h3>

<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/no-clearfix.png"></p>

<p>The grey container inflates to zero pixels because there is nothing in its &ldquo;flow&rdquo; to fill it. The wrapper is still there but you can’t see it.</p>

<h3>Under The Hood</h3>

<p>If you take a look at the source code it becomes clear how this <strong>micro clearfix</strong> works:</p>

<figure class='code'><figcaption><span>source code</span><a href='https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_clearfix.scss'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@mixin</span><span class="nf"> clearfix</span> <span class="err">{</span>
</span><span class='line'>  <span class="k">&amp;</span><span class="nd">:after</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">content</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="err">;</span>
</span><span class='line'>    <span class="nt">display</span><span class="nd">:table</span><span class="o">;</span>
</span><span class='line'>    <span class="nt">clear</span><span class="nd">:both</span><span class="o">;</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of creating an &ldquo;empty&rdquo; tag in your markup right before the closing tag of the container element and apply a clearfix there, this mixin uses the <strong>&amp;:after</strong> pseudo element and places an <strong>empty string</strong> at the very end of the container and clears the float. That way it mimics content after the logo and tricks the browser to expand the grey container to surround other elements inside.</p>

<h2></h2>

<ul>
<li><h2><a name='button'></a>button mixin</h2></li>
</ul>


<p>Need high quality buttons out of the box?</p>

<h4>Standard Button</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/bourbon-buttons/bourbon-button.png" width="250"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;super-duper-button&#39;</span><span class="nt">&gt;</span>Super duper button<span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>standard button</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">$light-blue</span><span class="o">:</span> <span class="mh">#2485F1</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.super-duper-button</span>
</span><span class='line'>  <span class="nd">+button</span><span class="p">(</span><span class="nv">$light-blue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// .super-duper-button {</span>
</span><span class='line'>     <span class="c1">@include button($light-blue);</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s it, simple and semantically clean buttons. They even come with great looking subtle hover effects.</p>

<p>There are two more options:</p>

<h4>Pill Button</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/bourbon-buttons/pill-button.png" width="250"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;super-duper-button&#39;</span><span class="nt">&gt;</span>Super duper pill button<span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>pill button</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">$dark-pink</span><span class="o">:</span> <span class="mh">#6B32D1</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.super-duper-button</span>
</span><span class='line'>  <span class="nd">+button</span><span class="p">(</span><span class="n">pill</span><span class="o">,</span> <span class="nv">$dark-pink</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// .super-duper-button {</span>
</span><span class='line'>     <span class="c1">@include button(pill, $dark-pink);</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Shiny Button</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/bourbon-buttons/shiny-button.png" width="250"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;super-duper-button&#39;</span><span class="nt">&gt;</span>Super duper shiny button<span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>shiny button</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">$acceptance-green</span><span class="o">:</span> <span class="mh">#43C914</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.super-duper-button</span>
</span><span class='line'>  <span class="nd">+button</span><span class="p">(</span><span class="n">shiny</span><span class="o">,</span> <span class="nv">$acceptance-green</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// .super-duper-button {</span>
</span><span class='line'>     <span class="c1">@include button(shiny, $acceptance-green);</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Attention!</h3>

<p>Please note that the text on the buttons automatically changes its color depending on the <strong>lightness</strong> of the base-color of the button. That way the mixin provides better <strong>contrast and readability</strong>. Awesome!</p>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/bourbon-buttons/grey-shiny-button.png" width="250"></p>

<figure class='code'><figcaption><span>text adapts to the color of the button </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">$light-grey</span><span class="o">:</span> <span class="mh">#DEDEDE</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.super-duper-button</span>
</span><span class='line'>  <span class="nd">+button</span><span class="p">(</span><span class="n">shiny</span><span class="o">,</span> <span class="nv">$light-grey</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// .super-duper-button {</span>
</span><span class='line'>     <span class="c1">@include button(shiny, $light-grey);</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<h2></h2>

<ul>
<li><h2><a name='size'></a>size mixin</h2></li>
</ul>


<p>Want to define <strong>width</strong> and <strong>height</strong> in one declaration?
All you need to do is:</p>

<figure class='code'><figcaption><span>size mixin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.small-article</span>
</span><span class='line'>  <span class="nd">+size</span><span class="p">(</span><span class="mi">300</span><span class="o">,</span> <span class="mi">400</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// .small-article {</span>
</span><span class='line'>     <span class="c1">@include size(300, 400);</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<h4>CSS Output</h4>

<figure class='code'><figcaption><span>output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.small-article</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can provide <strong>px</strong> values or just numerical values.
Of course you can use <strong>auto</strong> for these values as well.
If you provide only one size, Bourbon assumes you want a square.</p>

<figure class='code'><figcaption><span>square</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.square</span>
</span><span class='line'>  <span class="nd">+size</span><span class="p">(</span><span class="mi">25</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// .square {</span>
</span><span class='line'>     <span class="c1">@include size(25px);</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<h2></h2>

<ul>
<li><h2><a name='hidpi'></a>HiDPI mixin</h2></li>
</ul>


<p>If you want to quickly generate completely vendor prefixed media queries for detecting <strong>HiDPI</strong> ( &ldquo;Retina&rdquo; ) devices, this mixin comes in handy.</p>

<p>All you need to do is provide a target <strong>device pixel ratio</strong> and declarations that change if the media query detects devices with this or higher ratio. The default ratio is 1.3.</p>

<figure class='code'><figcaption><span>HiDPI-media-query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.image</span>
</span><span class='line'>  <span class="na">width</span><span class="o">:</span> <span class="mi">150</span><span class="kt">px</span>
</span><span class='line'>  <span class="nd">+hidpi</span><span class="p">(</span><span class="mi">1</span><span class="mf">.5</span><span class="p">)</span>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// .image {</span>
</span><span class='line'>     <span class="c1">width: 150px;</span>
</span><span class='line'>     <span class="c1">+hidpi(1.5) {</span>
</span><span class='line'>       <span class="c1">width: 200px;</span>
</span><span class='line'>     <span class="c1">}</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>CSS output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.image</span> <span class="err">{</span>
</span><span class='line'>  <span class="na">width</span><span class="o">:</span> <span class="mi">150</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">-webkit-min-device-pixel-ratio</span><span class="nd">:</span> <span class="nt">1</span><span class="nc">.5</span><span class="o">),</span>
</span><span class='line'>    <span class="na">only</span><span class="err"> </span><span class="na">screen</span><span class="err"> </span><span class="na">and</span><span class="err"> </span><span class="na">(min--moz-device-pixel-ratio</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.5</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>    <span class="na">only</span><span class="err"> </span><span class="na">screen</span><span class="err"> </span><span class="na">and</span><span class="err"> </span><span class="na">(-o-min-device-pixel-ratio</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.5</span><span class="o">/</span><span class="mi">1</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>    <span class="na">only</span><span class="err"> </span><span class="na">screen</span><span class="err"> </span><span class="na">and</span><span class="err"> </span><span class="na">(min-resolution</span><span class="o">:</span> <span class="mi">144</span><span class="kt">dpi</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>    <span class="na">only</span><span class="err"> </span><span class="na">screen</span><span class="err"> </span><span class="na">and</span><span class="err"> </span><span class="na">(min-resolution</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.5</span><span class="kt">dppx</span><span class="p">)</span> <span class="err">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="na">width</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span><span class="err">;</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty cool! Slimmed down repetitive code quite a bit.</p>

<h2></h2>

<ul>
<li><h2><a name='retina'></a>retina-image mixin</h2></li>
</ul>


<p>Depending on the <strong>pixel density</strong> of the device displaying your designs, you can provide images with the <strong>appropriate bitmap resolution</strong>. This fine mixin provides a <strong>retina background-image</strong> or a <strong>non-retina background-image</strong> — depending on the result of the mixin’s internal <strong>HiDPI-media-query</strong> checking the device for its pixel density.</p>

<p>If I’m not mistaken, as a bonus, it will serve only one of the images to avoid downloading both — which is especially advantageous for <strong>mobile devices</strong> with lower pixel densities. If the above is all <em>gobbledygook</em> to you, I’d recommend starting with this fantastic <a href="http://coding.smashingmagazine.com/2012/08/20/towards-retina-web/">article.</a></p>

<figure class='code'><figcaption><span>retina-image syntax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.logo</span>
</span><span class='line'>  <span class="nd">+retina-image</span><span class="p">(</span><span class="n">logo-icon</span><span class="o">,</span> <span class="mi">50</span><span class="kt">px</span><span class="o">,</span> <span class="mi">30</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// .logo {</span>
</span><span class='line'>     <span class="c1">@include retina-image(logo-icon, 50px, 30px);</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<p>The CSS output helps explain its functionality:</p>

<figure class='code'><figcaption><span>CSS output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.logo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(logo-icon.png)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">-webkit-min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min--moz-device-pixel-ratio</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">-o-min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3</span> <span class="o">/</span> <span class="nt">1</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-resolution</span><span class="o">:</span> <span class="nt">125dpi</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-resolution</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3dppx</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.logo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(logo-icon_2x.png)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">-</span><span class="k">size</span><span class="o">:</span> <span class="m">50px</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The default of using a <strong>device pixel ratio of 1.3</strong> targets Apple &ldquo;Retina&rdquo; devices (ratio of 2) as well as devices with pixel ratios as &ldquo;low&rdquo; as 1.3.</p>

<p>This mixin expects a <strong>.png</strong> as standard extension for all images. Per default, it also expects a <strong>_2x.png</strong> extension to the filename of your retina-image. Of course you can overwrite both defaults by providing another retina-filename and standard extension like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.logo</span>
</span><span class='line'>  <span class="nd">+retina-image</span><span class="p">(</span><span class="n">logo-icon</span><span class="o">,</span> <span class="mi">50</span><span class="kt">px</span><span class="o">,</span> <span class="mi">30</span><span class="kt">px</span><span class="o">,</span>
</span><span class='line'>                <span class="nv">$extension</span><span class="o">:</span> <span class="n">jpg</span><span class="o">,</span>
</span><span class='line'>                <span class="na">$retina-filename</span><span class="o">:</span> <span class="n">HiDPI-logo-icon</span><span class="o">,</span>
</span><span class='line'>                <span class="na">$retina-suffix</span><span class="o">:</span> <span class="n">_retina</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// .logo {</span>
</span><span class='line'>     <span class="c1">@include retina-image(logo-icon, 50px, 30px, </span>
</span><span class='line'>                <span class="c1">$extension: jpg, </span>
</span><span class='line'>                <span class="c1">$retina-filename: HiDPI-logo-icon, </span>
</span><span class='line'>                <span class="c1">$retina-suffix: _retina );</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>CSS output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.logo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(logo-icon.jpg)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">-webkit-min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min--moz-device-pixel-ratio</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">-o-min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3</span> <span class="o">/</span> <span class="nt">1</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-resolution</span><span class="o">:</span> <span class="nt">125dpi</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-resolution</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3dppx</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.logo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(HiDPI-logo-icon_retina.jpg)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">-</span><span class="k">size</span><span class="o">:</span> <span class="m">50px</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is another option if you are using the asset pipeline in Rails:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.logo</span>
</span><span class='line'>  <span class="nd">+retina-image</span><span class="p">(</span><span class="n">logo-icon</span><span class="o">,</span> <span class="mi">50</span><span class="kt">px</span><span class="o">,</span> <span class="mi">30</span><span class="kt">px</span><span class="o">,</span>
</span><span class='line'>                <span class="na">$asset-pipeline</span><span class="o">:</span> <span class="n-Pseudo">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// .logo {</span>
</span><span class='line'>     <span class="c1">@include retina-image(logo-icon, 50px, 30px,</span>
</span><span class='line'>                           <span class="c1">$asset-pipeline: true);</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>CSS output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.logo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(logo-icon.png)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">-webkit-min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min--moz-device-pixel-ratio</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">-o-min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3</span> <span class="o">/</span> <span class="nt">1</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-resolution</span><span class="o">:</span> <span class="nt">125dpi</span><span class="o">),</span>
</span><span class='line'>       <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-resolution</span><span class="o">:</span> <span class="nt">1</span><span class="nc">.3dppx</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.logo</span> <span class="p">{</span>          <span class="c">/* Attention! */</span>
</span><span class='line'>    <span class="k">background-image</span><span class="o">:</span> <span class="n">image</span><span class="o">-</span><span class="sx">url(logo-icon_2x.png)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">-</span><span class="k">size</span><span class="o">:</span> <span class="m">50px</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>*Attention!</h3>

<p>Notice that in the CSS output <strong>url</strong> is replaced with <strong>image-url</strong>. This is a rails helper method that translates to  <strong>url(/assets/logo-icon_2x.png)</strong>.
It’s a small difference but adds to your convenience developing with rails if you are using the <strong>asset pipeline</strong>.</p>

<h3>Critique</h3>

<p>The documentation says</p>

<blockquote><p>"The mixin is a helper to generate a retina background-image and non-retina background-image."</p><footer><strong>#retina-image</strong> <cite><a href='http://bourbon.io/docs/#retina-image'>Bourbon Documentation</a></cite></footer></blockquote>


<p>I think its fair to say that this is confusing because the mixin does not generate the &ldquo;Retina&rdquo; image itself. You still have to render the image with the appropriate amount of bitmap pixels that you need for larger resolution screens in your favorite graphics editing program yourself.</p>

<p>In that regard, what this mixin generates is a consistent naming schema for the <strong>values</strong> of <strong>background-image properties</strong> which expect to be able to <strong>serve images with higher resolutions</strong> from your <strong>assets</strong> if the media-query encounters devices with a <strong>device pixel ratio</strong> of <strong>1.3</strong> or higher.</p>

<h2></h2>

<p>That’s it for mixins. Next I will look into functions: <li><a href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2014/01/29/bourbon-functions/">Bourbon: Functions</a></li></p>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/bourbon-anime.gif" width="700"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bourbon - Mixins #01]]></title>
    <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/05/bourbon-mixins/"/>
    <updated>2015-07-05T20:55:32+02:00</updated>
    <id>http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/05/bourbon-mixins</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/bourbon-mixins.jpg" width="550"></p>

<p><a href="http://bourbon.io/"><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/bourbon-logo@2x.png" width="250" height="450"></a></p>

<h2>A Short List Of Goodies</h2>

<ul>
<li><a href="#background-image"><strong>background-image mixin</strong></a></li>
<li><a href="#linear-gradient"><strong>linear-gradient mixin</strong></a></li>
<li><a href="#border-radius"><strong>border-radius mixin</strong></a></li>
<li><a href="#box-sizing"><strong>box-sizing mixin</strong></a></li>
<li><a href="#transition"><strong>transition mixin</strong></a></li>
<li><a href="#font-face"><strong>font-face mixin</strong></a></li>
</ul>


<!-- more -->


<p>Let&rsquo;s take a look at these mixins in more detail.</p>

<p><em>The examples below represent not necessarily best design practices but are chosen for exploring the basic functionality of these mixins</em>.</p>

<h2></h2>

<ul>
<li><h2><a name='background-image'></a>background-image mixin</h2></li>
</ul>


<p>Creates a background-image property comprised out of multiple ( 1 up to 10 ) comma delimited <strong>background images</strong> and / or <strong>linear- / radial-gradients</strong>.</p>

<h5>With images</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;ridiculous-background&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>background-image mixin with images</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.ridiculous-background</span>
</span><span class='line'>  <span class="nd">+background-image</span><span class="p">(</span><span class="sx">url(&quot;bourbon-logo@2x.png&quot;)</span><span class="o">,</span> <span class="sx">url(&quot;thoughtbot-logo.png&quot;)</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// chain the positions for the images</span>
</span><span class='line'>  <span class="na">background-position</span><span class="o">:</span> <span class="no">center</span> <span class="no">top</span><span class="o">,</span> <span class="no">top</span> <span class="no">left</span>
</span><span class='line'>  <span class="c1">// chain the repeat values</span>
</span><span class='line'>  <span class="na">background-repeat</span><span class="o">:</span> <span class="no">repeat-y</span><span class="o">,</span> <span class="no">repeat-x</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">560</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'><span class="c1">//  .ridiculous-background {</span>
</span><span class='line'>      <span class="c1">@include background-image(url(&quot;bourbon-logo@2x.png&quot;), url(&quot;thoughtbot-logo.png&quot;));</span>
</span><span class='line'>      <span class="c1">background-position: center top, top left;</span>
</span><span class='line'>      <span class="c1">background-repeat: repeat-y, repeat-x;</span>
</span><span class='line'>      <span class="c1">height: 560px;</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/background-image-mixin.png"></p>

<h3>Attention!</h3>

<p>Take a look at the precedence of layers -> The first image gets displayed on top.
The same goes for gradients.</p>

<h4>Shorthand notation</h4>

<p>You can use a shorthand notation for <strong>background-image</strong> like this:</p>

<figure class='code'><figcaption><span>shorthand notation for background-image mixin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.ridiculous-background</span>
</span><span class='line'>  <span class="nd">+background</span><span class="p">(</span><span class="sx">url(&quot;bourbon-logo@2x.png&quot;)</span><span class="o">,</span> <span class="sx">url(&quot;thoughtbot-logo.png&quot;)</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'><span class="c1">//  .ridiculous-background</span>
</span><span class='line'><span class="c1">//    @include background(url(&quot;bourbon-logo@2x.png&quot;), url(&quot;thoughtbot-logo.png&quot;)); </span>
</span></code></pre></td></tr></table></div></figure>


<h4>With gradients</h4>

<p>You can make use of Bourbon’s <strong>linear-gradient function</strong> inside the background-image mixin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&#39;super-duper-gradient&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>background-image mixin with gradients</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.super-duper-gradient</span>
</span><span class='line'>  <span class="nd">+background-image</span><span class="p">(</span>
</span><span class='line'>  <span class="c1">// linear-gradient function</span>
</span><span class='line'>  <span class="nt">linear-gradient</span><span class="o">(</span><span class="nt">hsla</span><span class="o">(</span><span class="nt">0</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">0</span><span class="nc">.25</span><span class="o">)</span> <span class="nt">0</span><span class="err">%</span><span class="o">,</span> <span class="nt">hsla</span><span class="o">(</span><span class="nt">0</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">0</span><span class="nc">.08</span><span class="o">)</span> <span class="nt">50</span><span class="err">%</span><span class="o">,</span> <span class="nt">transparent</span> <span class="nt">50</span><span class="err">%</span><span class="o">),</span>
</span><span class='line'>  <span class="nt">linear-gradient</span><span class="o">(</span><span class="nn">#4e7ba3</span><span class="o">,</span> <span class="nt">darken</span><span class="o">(</span><span class="nn">#4e7ba4</span><span class="o">,</span> <span class="nt">10</span><span class="err">%</span><span class="o">)))</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">50</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'><span class="c1">//  .super-duper-gradient {</span>
</span><span class='line'>      <span class="c1">@include background-image(</span>
</span><span class='line'>      <span class="c1">linear-gradient(hsla(0, 100%, 100%, 0.25) 0%, hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), </span>
</span><span class='line'>      <span class="c1">linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)));</span>
</span><span class='line'>      <span class="c1">height: 50px;</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/backgroud-image_gradient.png"></p>

<h2></h2>

<ul>
<li><h2><a name='linear-gradient'></a>linear-gradient mixin</h2></li>
</ul>


<p>This little fella can take up to 10 color stops and takes percent values if you want to fine tune the color distribution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&#39;simple-gradient&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>linear-gradient mixin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">$start-gradient-color</span><span class="o">:</span> <span class="mh">#268BD2</span>
</span><span class='line'><span class="na">$end-gradient-color</span><span class="o">:</span> <span class="mh">#7229d1</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.simple-gradient</span>
</span><span class='line'>  <span class="nd">+linear-gradient</span><span class="p">(</span><span class="nv">$start-gradient-color</span><span class="o">,</span> <span class="nv">$end-gradient-color</span><span class="p">)</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'><span class="c1">//  .simple-gradient {</span>
</span><span class='line'>      <span class="c1">@include linear-gradient($start-gradient-color, $end-gradient-color)</span>
</span><span class='line'>      <span class="c1">height: 200px;</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/linear-gradient-mixin.png"></p>

<h2></h2>

<p>You can also provide an optional first argument to control the direction (in degrees) of the gradient.</p>

<figure class='code'><figcaption><span>linear-gradient mixin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">$start-gradient-color</span><span class="o">:</span> <span class="mh">#268BD2</span>
</span><span class='line'><span class="na">$end-gradient-color</span><span class="o">:</span> <span class="mh">#7229d1</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.simple-gradient</span>
</span><span class='line'>  <span class="nd">+linear-gradient</span><span class="p">(</span><span class="mi">-90</span><span class="kt">deg</span><span class="o">,</span> <span class="nv">$start-gradient-color</span><span class="o">,</span> <span class="nv">$end-gradient-color</span><span class="p">)</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'><span class="c1">//  .simple-gradient {</span>
</span><span class='line'>      <span class="c1">@include linear-gradient(-90deg, $start-gradient-color, $end-gradient-color)</span>
</span><span class='line'>      <span class="c1">height: 200px;</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/linear-gradient-mixin-direction.png"></p>

<h2></h2>

<ul>
<li><h2><a name='border-radius'></a>border-radius mixin</h2></li>
</ul>


<p>This handy mixin makes it straightforward to target the corners of a box in pairs: top, bottom, right and left corners basically. If you want rounded corners and avoid typing repetitive declarations, this one is your friend.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&#39;super-duper-borders&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>border-radius mixin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.super-duper-borders</span>
</span><span class='line'>  <span class="nd">+background-image</span><span class="p">(</span>
</span><span class='line'>  <span class="nt">linear-gradient</span><span class="o">(</span><span class="nt">hsla</span><span class="o">(</span><span class="nt">0</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">0</span><span class="nc">.25</span><span class="o">)</span> <span class="nt">0</span><span class="err">%</span><span class="o">,</span> <span class="nt">hsla</span><span class="o">(</span><span class="nt">0</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">100</span><span class="err">%</span><span class="o">,</span> <span class="nt">0</span><span class="nc">.08</span><span class="o">)</span> <span class="nt">50</span><span class="err">%</span><span class="o">,</span> <span class="nt">transparent</span> <span class="nt">50</span><span class="err">%</span><span class="o">),</span>
</span><span class='line'>  <span class="nt">linear-gradient</span><span class="o">(</span><span class="nn">#4e7ba3</span><span class="o">,</span> <span class="nt">darken</span><span class="o">(</span><span class="nn">#4e7ba4</span><span class="o">,</span> <span class="nt">10</span><span class="err">%</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// border-radii for every corner</span>
</span><span class='line'>  <span class="nd">+border-top-radius</span><span class="p">(</span><span class="mi">3</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+border-bottom-radius</span><span class="p">(</span><span class="mi">3</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">50</span><span class="kt">px</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'><span class="c1">//  .super-duper-borders {</span>
</span><span class='line'>      <span class="c1">@include background-image(</span>
</span><span class='line'>      <span class="c1">linear-gradient(hsla(0, 100%, 100%, 0.25) 0%, hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), </span>
</span><span class='line'>      <span class="c1">linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)));</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">@include border-top-radius(3px);</span>
</span><span class='line'>      <span class="c1">@include border-bottom-radius(3px);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">height: 50px;</span>
</span><span class='line'><span class="c1">//  } </span>
</span></code></pre></td></tr></table></div></figure>


<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/border-radius-mixin.png"></p>

<p>Compare both gradients and focus your attention on the lower gradient which now has very subtle <strong>3px rounded corners</strong>. Too much rounding lets designs often look comical. Keep it simple!</p>

<h2></h2>

<p>Of course you can go crazy with border radii. If you put some time into it, you can build some cool stuff with it. Below are a couple of nonsensical examples that should just illustrate how the various options work.</p>

<figure class='code'><figcaption><span>border-radius mixin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.super-duper-borders</span>
</span><span class='line'>  <span class="nd">+linear-gradient</span><span class="p">(</span><span class="nv">$start-gradient-color</span><span class="o">,</span> <span class="nv">$end-gradient-color</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// border-radii for top &amp; bottom corners</span>
</span><span class='line'>  <span class="nd">+border-top-radius</span><span class="p">(</span><span class="mi">600</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+border-bottom-radius</span><span class="p">(</span><span class="mi">100</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/border-radius-mixin-crazy.png"></p>

<h2></h2>

<figure class='code'><figcaption><span>border-radius mixin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.super-duper-borders</span>
</span><span class='line'>  <span class="nd">+linear-gradient</span><span class="p">(</span><span class="nv">$start-gradient-color</span><span class="o">,</span> <span class="nv">$end-gradient-color</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// border-radii for right &amp; left corners</span>
</span><span class='line'>  <span class="nd">+border-right-radius</span><span class="p">(</span><span class="mi">600</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+border-left-radius</span><span class="p">(</span><span class="mi">100</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">200</span><span class="kt">px</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/border-radius-mixin-crazy2.png"></p>

<h2></h2>

<ul>
<li><h2><a name='box-sizing'></a>box-sizing mixin</h2></li>
</ul>


<p>Easily change the box model of an element. You have 3 options to choose:</p>

<p><strong>border-box | content-box | inherit</strong></p>

<p>( <a href="http://css-tricks.com/box-sizing/">more about box sizing</a> )</p>

<figure class='code'><figcaption><span>box-sizing mixin </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.user-profile</span>
</span><span class='line'>  <span class="nd">+box-sizing</span><span class="p">(</span><span class="no">border</span><span class="o">-</span><span class="n">box</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//   SCSS syntax</span>
</span><span class='line'><span class="c1">//  .user-profile {</span>
</span><span class='line'>      <span class="c1">@include box-sizing(border-box);</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h2></h2>

<ul>
<li><h2><a name='transition'></a>transition mixin</h2></li>
</ul>


<p>You attach the transition mixin to the default state of the selector that is to be changed by an event like hover — <strong>not to the pseudo-class!</strong> The declarations used in the pseudo-class are available to the transition mixin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&#39;fancy-transition&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>transition mixin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.fancy-transition</span>
</span><span class='line'>  <span class="nd">+transition</span> <span class="p">(</span><span class="n">all</span> <span class="mi">1</span><span class="mf">.0</span><span class="kt">s</span> <span class="nv">$ease-in-sine</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">50</span><span class="kt">px</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">red</span>
</span><span class='line'>  <span class="nd">+border-top-radius</span><span class="p">(</span><span class="mi">5</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+border-bottom-radius</span><span class="p">(</span><span class="mi">5</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">&amp;</span><span class="nd">:hover</span>
</span><span class='line'>  <span class="c1">// declarations available to the transitions mixin</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nb">blue</span>
</span><span class='line'>  <span class="nd">+border-top-radius</span><span class="p">(</span><span class="mi">25</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>  <span class="nd">+border-bottom-radius</span><span class="p">(</span><span class="mi">25</span><span class="kt">px</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'><span class="c1">//  .fancy-transition {</span>
</span><span class='line'>      <span class="c1">@include transition (all 1.0s $ease-in-sine);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">height: 50px;</span>
</span><span class='line'>      <span class="c1">background-color: red;</span>
</span><span class='line'>      <span class="c1">@include border-top-radius(5px);</span>
</span><span class='line'>      <span class="c1">@include border-bottom-radius(5px);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">declarations available to the transitions mixin</span>
</span><span class='line'>      <span class="c1">&amp;:hover {</span>
</span><span class='line'>      <span class="c1">background-color: blue;</span>
</span><span class='line'>      <span class="c1">@include border-top-radius(25px);</span>
</span><span class='line'>      <span class="c1">@include border-bottom-radius(25px);</span>
</span><span class='line'>      <span class="c1">}</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Screenshots</h3>

<h4>Normal state</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/transition-mixin-red.png"></p>

<p>It transitions over the specified time -> Here 1.0s</p>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/transition.gif"></p>

<h4>Hover state after transition</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/transition-mixin-blue.png"></p>

<p>You can handpick the properties you want to be affected by the transition. Instead of  <strong>all</strong> use only the properties you need. Different timing-functions for different properties can also be chained together nicely.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="c1">// all</span>
</span><span class='line'><span class="k">@include</span><span class="nd"> transition</span> <span class="p">(</span><span class="n">all</span> <span class="mi">1</span><span class="mf">.0</span><span class="kt">s</span> <span class="nv">$ease-in-sine</span><span class="p">)</span><span class="err">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fine-tuned</span>
</span><span class='line'><span class="k">@include</span><span class="nd"> transition</span> <span class="p">(</span><span class="no">background-color</span> <span class="mi">2</span><span class="mf">.0</span><span class="kt">s</span> <span class="nv">$ease-in-sine</span><span class="o">,</span> <span class="no">height</span> <span class="mi">1</span><span class="mf">.0</span><span class="kt">s</span> <span class="nv">$ease-out-cubic</span><span class="p">)</span><span class="err">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2></h2>

<p>To fine-tune transitional behaviour, there are a number of very convenient Sass variables from Bourbon for various <strong>timing-functions</strong> at your disposal:</p>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/timing-functions.gif"></p>

<h2></h2>

<ul>
<li><h2><a name='font-face'></a>font-face mixin</h2></li>
</ul>


<p>As we know, typography is an essential piece of the puzzle of designing high quality projects for the web. As a kind of atomic structure it guides so many design decisions and can influence the perception of the user in a multitude of ways.</p>

<p><strong>@font-face</strong> allows designers to <strong>customize type</strong> an incredible amount by providing users with custom fonts which they might not have installed on their machines.</p>

<p>In the past I went to <a href="http://fontsquirrel.com">fontsquirrel</a>, which is awesome btw, used the <strong>webfont generator</strong> and pasted a lot of CSS like this into my stylesheets. Those days are gone.</p>

<figure class='code'><figcaption><span>styles generated by webfont generator pasted into a classic CSS stylesheet</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@font-face</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">font-family</span><span class="o">:</span> <span class="s1">&#39;</span><span class="s2">SourceSansPro-Regular&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="na">src</span><span class="o">:</span> <span class="sx">url(&#39;sourcesanspro-regular.eot&#39;)</span><span class="p">;</span>
</span><span class='line'>    <span class="na">src</span><span class="o">:</span> <span class="sx">url(&#39;sourcesanspro-regular.eot?#iefix&#39;)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">embedded-opentype&#39;</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>         <span class="sx">url(&#39;sourcesanspro-regular.woff&#39;)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">woff&#39;</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>         <span class="sx">url(&#39;sourcesanspro-regular.ttf&#39;)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">truetype&#39;</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>         <span class="sx">url(&#39;sourcesanspro-regular.svg#source_sans_proregular&#39;)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">svg&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="no">normal</span><span class="p">;</span>
</span><span class='line'>    <span class="na">font-style</span><span class="o">:</span> <span class="no">normal</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@font-face</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">font-family</span><span class="o">:</span> <span class="s1">&#39;</span><span class="s2">SourceSansPro-Bold&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="na">src</span><span class="o">:</span> <span class="sx">url(&#39;sourcesanspro-bold.eot&#39;)</span><span class="p">;</span>
</span><span class='line'>    <span class="na">src</span><span class="o">:</span> <span class="sx">url(&#39;sourcesanspro-bold.eot?#iefix&#39;)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">embedded-opentype&#39;</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>         <span class="sx">url(&#39;sourcesanspro-bold.woff&#39;)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">woff&#39;</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>         <span class="sx">url(&#39;sourcesanspro-bold.ttf&#39;)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">truetype&#39;</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>         <span class="sx">url(&#39;sourcesanspro-bold.svg#source_sans_probold&#39;)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">svg&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="no">normal</span><span class="p">;</span>
</span><span class='line'>    <span class="na">font-style</span><span class="o">:</span> <span class="no">normal</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// applied custom fonts to some classes</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.regular-font</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">font-family</span><span class="o">:</span> <span class="n">SourceSansPro-Regular</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.bold-font</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">font-family</span><span class="o">:</span> <span class="n">SourceSansPro-Bold</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously this can get very tedious very quickly. Using Bourbon, it looks like this now:
(Using Rails with the asset pipeline here)</p>

<figure class='code'><figcaption><span>font-face mixin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nd">+font-face</span><span class="p">(</span><span class="n">SourceSansPro-Regular</span><span class="o">,</span> <span class="s1">&#39;</span><span class="s2">SourceSansPro/sourcesanspro-regular&#39;</span><span class="o">,</span> <span class="no">normal</span><span class="o">,</span> <span class="nv">$asset-pipeline</span><span class="o">:</span> <span class="n-Pseudo">true</span><span class="p">)</span>
</span><span class='line'><span class="nd">+font-face</span><span class="p">(</span><span class="n">SourceSansPro-Bold</span><span class="o">,</span> <span class="s1">&#39;</span><span class="s2">SourceSansPro/sourcesanspro-bold&#39;</span><span class="o">,</span> <span class="no">bold</span><span class="o">,</span> <span class="nv">$asset-pipeline</span><span class="o">:</span> <span class="n-Pseudo">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.regular-font</span>
</span><span class='line'>  <span class="na">font-family</span><span class="o">:</span> <span class="n">SourceSansPro-Regular</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.bold-font</span>
</span><span class='line'>  <span class="na">font-family</span><span class="o">:</span> <span class="n">SourceSansPro-Bold</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'><span class="c1">//  @include font-face(SourceSansPro-Regular, &#39;SourceSansPro/sourcesanspro-regular&#39;, normal, $asset-pipeline: true); </span>
</span><span class='line'>    <span class="c1">@include font-face(SourceSansPro-Bold, &#39;SourceSansPro/sourcesanspro-bold&#39;, bold, $asset-pipeline: true); </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">.regular-font {</span>
</span><span class='line'>      <span class="c1">font-family: SourceSansPro-Regular;</span>
</span><span class='line'>    <span class="c1">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">.bold-font {</span>
</span><span class='line'>      <span class="c1">font-family: SourceSansPro-Bold;</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boom!! That easy! And a remarkable reduction of code as well.</p>

<h3>Under The Hood:</h3>

<p>This mixin expects you to provide</p>

<ul>
<li>a <strong>fonts</strong> folder where you store your webfonts
— which you can still generate with the <strong>webfont generator</strong> from <strong>fontsquirrel</strong> ->  eot, ttf, woff, svg formats of uploaded typefaces.</li>
</ul>


<h4>Screenshot</h4>

<p>(this example is from a Rails app)</p>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/app-assets-fonts.png"></p>

<ul>
<li><p>a <strong>font-family</strong> name for later use in your declarations
— can be any name you wish. Above I used <strong>SourceSansPro-Regular </strong>and <strong>SourceSansPro-Bold</strong> for example</p></li>
<li><p>a <strong>file-path</strong> to find the custom font on the machine</p></li>
<li><p><strong>font-weight</strong> like <em>normal</em> or <em>bold</em></p></li>
<li><p><strong>font-style</strong> like <em>normal</em>, <em>italic</em> or <em>oblique</em> ( maybe avoid oblique type! )</p></li>
<li><p>and a hash for using the <strong>asset-pipeline</strong> in Rails or not</p></li>
</ul>


<figure class='code'><figcaption><span>Breaking down the parts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'>         <span class="c1">//font-family name      file-path                          weight  style </span>
</span><span class='line'><span class="nd">+font-face</span><span class="p">(</span><span class="n">NameFor-font-family</span><span class="o">,</span> <span class="s1">&#39;</span><span class="s2">SomeFontFolder/NameOfFont-Italic&#39;</span><span class="o">,</span> <span class="no">normal</span><span class="o">,</span> <span class="no">italic</span><span class="o">,</span> <span class="nv">$asset-pipeline</span><span class="o">:</span> <span class="n-Pseudo">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SCSS syntax</span>
</span><span class='line'><span class="c1">// @include font-face(NameFor-font-family, &#39;SomeFontFolder/NameOfFont-Italic&#39;, normal, italic, $asset-pipeline: true);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Attention!</h3>

<ul>
<li>The order of the includes matters, and it is:</li>
</ul>


<p><strong>normal, bold, italic, bold+italic</strong></p>

<ul>
<li>Do not use forward slashes for the folder your fonts are stored in!!
It will fail like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'>                                   <span class="o">!!!</span>
</span><span class='line'><span class="nd">+font-face</span><span class="p">(</span><span class="n">SourceSansPro-Regular</span><span class="o">,</span> <span class="s1">&#39;</span><span class="s2">/SourceSansPro/sourcesanspro-regular&#39;</span><span class="o">,</span> <span class="no">normal</span><span class="o">,</span> <span class="nv">$asset-pipeline</span><span class="o">:</span> <span class="n-Pseudo">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'><span class="c1">//  @include font-face(/SourceSansPro-Regular, &#39;/SourceSansPro/sourcesanspro-regular&#39;, normal, $asset-pipeline: true); </span>
</span></code></pre></td></tr></table></div></figure>


<h2>Cheers!</h2>

<p>I have prepared another article about Bourbon&rsquo;s mixins: <li><a href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/10/bourbon-mixins-02/">Bourbon: Mixins #02</a></li></p>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/github-bourbon.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bourbon - Connoisseurs’ Choice Sass Mixins]]></title>
    <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/01/bourbon-sass-introduction/"/>
    <updated>2015-07-01T19:34:54+02:00</updated>
    <id>http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/01/bourbon-sass-introduction</id>
    <content type="html"><![CDATA[<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/david_niven.jpg" width="600" height="360" title="" ></p>

<p><a href="http://bourbon.io/"><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/bourbon-logo@2x.png" width="250" height="450"></a></p>

<h2>What’s ahead?</h2>

<ul>
<li><strong>Introduction</strong></li>
<li><a href="#setup"><strong>Setup</strong></a></li>
<li><a href="#mixins"><strong>Mixins Overview</strong></a></li>
<li><a href="#functions"><strong>Functions Overview</strong></a></li>
<li><a href="#addons"><strong>Add-ons</strong></a></li>
<li><a href="#conclusion"><strong>Conclusion</strong></a></li>
</ul>


<!--more-->


<h2>An Introduction</h2>

<p><a href="http://bourbon.io">Bourbon</a> is a top-notch Sass <strong>library for designers</strong>. It has a minimalistic approach and is serious about creating quality code that cares about <strong>semantics</strong>. I like it especially because it encourages best practices for developing great code that scales.</p>

<p>This gem helps designers to write their code faster and manages a lot of the nitty-gritty details like annoying vendor prefixes. It’s mixins often act as wrappers for outputting quality CSS but stay as vanilla as possible by being close to the original CSS syntax.</p>

<p>Big heavyweight frameworks like <a href="http://getbootstrap.com">Bootstrap</a> certainly have their charms. Developers like them because most design decisions are already made and reasonably decent looking websites come out pretty much prefabricated. There&rsquo;s nothing wrong with that - given that you want to bootstrap your project without a designer who values semantic markup. I should mention though that once designers are involved they might not be happy with that choice. Having to manually rip out unsemantic styles that are intertwined  with your markup might give them ideas for putting funny stuff in your coffee.</p>

<h3>Worth Pointing Out</h3>

<ul>
<li>Bourbon is pure Sass &amp; platform agnostic, it works with any Sass project</li>
<li>Very close to the vanilla CSS syntax</li>
<li>Not tied to Ruby, unlike Compass</li>
<li>Includes awesome functions</li>
<li>Outsources vendor prefixes</li>
<li>It’s super lightweight</li>
<li>It’s semantic</li>
</ul>


<h2><a name='setup'></a>Setup</h2>

<ul>
<li>Fire up your terminal, change into your project’s directory and install Bourbon via RubyGems</li>
</ul>


<figure class='code'><figcaption><span>Terminal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install bourbon
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Change into your project’s stylesheets directory and generate your <strong>bourbon folder</strong></li>
</ul>


<figure class='code'><figcaption><span>Terminal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bourbon install
</span></code></pre></td></tr></table></div></figure>


<p>This command generates a bourbon folder that contains the functions, mixins, helpers, settings, etc. that you need. I’d recommend that you don’t touch this folder. You will have a much better experience updating Bourbon in the future.</p>

<h4>Screenshot</h4>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-introduction/bourbon-install-generated-folder.png"></p>

<ul>
<li>You need to finish the setup by importing the generated <code>sass</code> files in your stylesheets. Import Bourbon on top of your <strong>application.sass</strong> file and make sure you only import other Sass files below.</li>
</ul>


<figure class='code'><figcaption><span>application.sass</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@import</span> <span class="s">&#39;bourbon/bourbon&#39;</span>
</span><span class='line'><span class="k">@import</span> <span class="s">&#39;other-sass-partials-below&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a name='mixins'></a>Mixins Overview</h2>

<p>Bourbon has a wide range of super useful mixins to speed up your work. In terms of design, it’s safe to say that they want to support your own design decisions without forcing a particular style on you. You are basically encouraged to mix your own awesome sauce. You can use these mixins as a stable and relatively neutral basis.</p>

<p>Here are a couple of mixins you might wanna check out first:</p>

<ul>
<li><code>background-image</code></li>
<li><code>linear-gradient</code></li>
<li><code>border-radius</code></li>
<li><code>retina-image</code></li>
<li><code>inline-block</code></li>
<li><code>transitions</code></li>
<li><code>box-sizing</code></li>
<li><code>animations</code></li>
<li><code>font-face</code></li>
<li><code>triangle</code></li>
<li><code>clearfix</code></li>
<li><code>position</code></li>
<li><code>button</code></li>
<li><code>size</code></li>
</ul>


<p>Learn more about individual Bourbon mixins in my other articles here:</p>

<ul>
<li><a href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/05/bourbon-mixins/">Bourbon: Mixins #01</a></li>
<li><a href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/10/bourbon-mixins-02/">Bourbon: Mixins #02</a></li>
</ul>


<h2><a name='functions'></a>Functions Overview</h2>

<p>Sass already has a ton of built-in functions, from manipulating strings to messing with opacity and colors. Bourbon adds a couple of selected enhancements and provides very handy Sass functions for a variety of use cases. Take a look a this selection:</p>

<ul>
<li><code>linear-gradient()</code></li>
<li><code>modular-scale()</code></li>
<li><code>golden-ratio()</code></li>
<li><code>shade()</code></li>
<li><code>tint()</code></li>
<li><code>em()</code></li>
</ul>


<p>I have prepared a more detailed look at functions here:
<a href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/15/bourbon-functions/">Bourbon: Functions</a></p>

<h2><a name='addons'></a>Add-ons</h2>

<ul>
<li><h4><strong>font-family variables</strong></h4></li>
</ul>


<p>Bourbon defines a small but useful set of default variables for font-families.</p>

<ul>
<li><code>$lucida-grande</code></li>
<li><code>$monospace</code></li>
<li><code>$helvetica</code></li>
<li><code>$georgia</code></li>
<li><code>$verdana</code></li>
</ul>


<p>Instead of typing —</p>

<figure class='code'><figcaption><span>traditional way of defining fonts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">font-family</span><span class="o">:</span> <span class="s2">&quot;Helvetica Neue&quot;</span><span class="o">,</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="no">sans-serif</span>
</span></code></pre></td></tr></table></div></figure>


<p>— you just use one of the font-family variables.</p>

<figure class='code'><figcaption><span>font-family variable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="na">font-family</span><span class="o">:</span> <span class="nv">$helvetica</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h4><strong>timing variables</strong></h4></li>
</ul>


<p>A mixin like <code>transition</code> has the following syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.some-element</span>
</span><span class='line'>  <span class="nd">+transition</span><span class="p">(</span><span class="n">all</span> <span class="mi">5</span><span class="kt">s</span> <span class="nv">$ease-in-circ</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  SCSS syntax</span>
</span><span class='line'><span class="c1">//  .some-element {</span>
</span><span class='line'>      <span class="c1">@include transition(all 5s $ease-in-circ);</span>
</span><span class='line'><span class="c1">//  }</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last parameter defines it’s <strong>timing</strong>. You can fine-tune the transitional behaviour by providing one of 24 variables to control timing. The GIF belows illustrates the options best:</p>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/timing-functions.gif"></p>

<h2><a name='conclusion'></a>Conclusion</h2>

<p>Do your future self and your colleagues a favor and give <a href="http://bourbon.io">Bourbon</a> a shot. This gem puts a high value on <strong>semantic markup</strong> while being <strong>lightweight &amp; simple</strong>. It will serve you well with your design and CSS architecture plus it aids cultivating best practices for creating superb code.</p>

<p><img src="http://vis-kid.github.io/octopress_drafts_previewer/images/bourbon-mixins/LaForge.gif" width="600"></p>
]]></content>
  </entry>
  
</feed>
