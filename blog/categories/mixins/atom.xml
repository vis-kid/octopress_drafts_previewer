<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mixins | Drafts Previewer]]></title>
  <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/categories/mixins/atom.xml" rel="self"/>
  <link href="http://vis-kid.github.io/octopress_drafts_previewer/"/>
  <updated>2015-07-05T19:45:58+02:00</updated>
  <id>http://vis-kid.github.io/octopress_drafts_previewer/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bourbon - Mixins #01]]></title>
    <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/05/bourbon-mixins/"/>
    <updated>2015-07-05T20:55:32+02:00</updated>
    <id>http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/05/bourbon-mixins</id>
    <content type="html"><![CDATA[<p><img src="/images/bourbon-mixins/bourbon-mixins.jpg" width="550"></p>

<p><a href="http://bourbon.io/"><img src="/images/bourbon-mixins/bourbon-logo@2x.png" width="250" height="450"></a></p>

<h2>A Short List Of Goodies</h2>

<ul>
<li><strong>background-image mixin</strong></li>
<li><strong>linear-gradient mixin</strong></li>
<li><strong>border-radius mixin</strong></li>
<li><strong>box-sizing mixin</strong></li>
<li><strong>transition mixin</strong></li>
<li><strong>font-face mixin</strong></li>
</ul>


<p>Let&rsquo;s take a look at these mixins in more detail.</p>

<!-- more -->


<p><em>The examples below represent not necessarily best design practices but are chosen for exploring the basic functionality of these mixins</em>.</p>

<h2></h2>

<ul>
<li><h3>background-image mixin</h3></li>
</ul>


<p>Creates a background-image property comprised out of multiple ( 1 up to 10 ) comma delimited <strong>background images</strong> and / or <strong>linear- / radial-gradients</strong>.</p>

<h5>With images</h5>

<p>``` html</p>

<p><div class='ridiculous-background'>
```</p>

<pre><code class="sass background-image mixin with images">.ridiculous-background
  +background-image(url("bourbon-logo@2x.png"), url("thoughtbot-logo.png"))

  // chain the positions for the images
  background-position: center top, top left
  // chain the repeat values
  background-repeat: repeat-y, repeat-x

  height: 560px

//  SCSS syntax
//  .ridiculous-background {
      @include background-image(url("bourbon-logo@2x.png"), url("thoughtbot-logo.png"));
      background-position: center top, top left;
      background-repeat: repeat-y, repeat-x;
      height: 560px;
//  }
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/background-image-mixin.png"></p>

<h3>Attention!</h3>

<p>Take a look at the precedence of layers -> The first image gets displayed on top.
The same goes for gradients.</p>

<h4>Shorthand notation</h4>

<p>You can use a shorthand notation for <strong>background-image</strong> like this:</p>

<pre><code class="sass shorthand notation for background-image mixin">.ridiculous-background
  +background(url("bourbon-logo@2x.png"), url("thoughtbot-logo.png")) 

//  SCSS syntax
//  .ridiculous-background
//    @include background(url("bourbon-logo@2x.png"), url("thoughtbot-logo.png")); 
</code></pre>

<h5>With gradients</h5>

<p>You can use of Bourbon&rsquo;s <strong>linear-gradient function</strong> inside the background-image mixin.</p>

<pre><code class="html ">&lt;section class='super-duper-gradient'&gt;
</code></pre>

<pre><code class="sass background-image mixin with gradients">.super-duper-gradient
    +background-image(
  // linear-gradient function
  linear-gradient(hsla(0, 100%, 100%, 0.25) 0%, hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), 
  linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)))
  height: 50px

//  SCSS syntax
//  .super-duper-gradient {
      @include background-image(
      linear-gradient(hsla(0, 100%, 100%, 0.25) 0%, hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), 
      linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)));
      height: 50px;
//  }
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/backgroud-image_gradient.png"></p>

<h2></h2>

<ul>
<li><h3>linear-gradient mixin</h3></li>
</ul>


<pre><code class="html ">&lt;section class='simple-gradient'&gt;
</code></pre>

<pre><code class="sass linear-gradient mixin">.simple-gradient
  +linear-gradient(#268BD2, #7229d1)
  height: 200px

//  SCSS syntax
//  .simple-gradient {
      @include linear-gradient(#268BD2, #7229d1);
      height: 200px;
//  }
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/linear-gradient-mixin.png"></p>

<h2></h2>

<ul>
<li><h3>border-radius mixin</h3></li>
</ul>


<pre><code class="html ">&lt;section class='super-duper-borders'&gt;
</code></pre>

<pre><code class="sass border-radius mixin">.super-duper-borders
  +background-image(
  linear-gradient(hsla(0, 100%, 100%, 0.25) 0%, hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), 
  linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)))

  // border-radii for every corner
  +border-top-radius(3px)
  +border-bottom-radius(3px)
  +border-left-radius(3px)
  +border-right-radius(3px)

  height: 50px


//  SCSS syntax
//  .super-duper-borders {
      @include background-image(
      linear-gradient(hsla(0, 100%, 100%, 0.25) 0%, hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), 
      linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)));

      @include border-top-radius(3px);
      @include border-bottom-radius(3px);
      @include border-left-radius(3px);
      @include border-right-radius(3px);

      height: 50px;
//  } 
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/border-radius-mixin.png"></p>

<p>Compare both gradients and focus your attention on the lower gradient which now has very subtle <strong>3px rounded corners</strong>. Too much rounding lets designs often look comical. Keep it simple!</p>

<h2></h2>

<ul>
<li><h3>box-sizing mixin</h3></li>
</ul>


<p>Easily change the box model of an element. You have 3 options to choose:</p>

<p><strong>border-box | content-box | inherit</strong></p>

<p>( <a href="http://css-tricks.com/box-sizing/">more about box sizing</a> )</p>

<pre><code class="sass box-sizing mixin ">.user-profile
  +box-sizing(border-box)

//   SCSS syntax
//  .user-profile {
      @include box-sizing(border-box);
//  }
</code></pre>

<h2></h2>

<ul>
<li><h3>transition mixin</h3></li>
</ul>


<p>You attach the transition mixin to the default state of the selector that is to be changed by an event like hover â€” <strong>not to the pseudo-class!</strong> The declarations used in the pseudo-class are available to the transition mixin.</p>

<pre><code class="html ">&lt;section class='fancy-transition'&gt;
</code></pre>

<pre><code class="sass transition mixin">.fancy-transition 
  +transition (all 1.0s ease-in-out)

  background-color: red
  +border-top-radius(5px)
  +border-bottom-radius(5px)
  +border-left-radius(5px)
  +border-right-radius(5px)
  height: 50px

  &amp;:hover 
  // declarations available to the transitions mixin
  background-color: blue 
  +border-top-radius(25px)
  +border-bottom-radius(25px)
  +border-left-radius(25px)
  +border-right-radius(25px)


//  SCSS syntax
//  .fancy-transition {
      @include transition (all 1.0s ease-in-out);

      background-color: red;
      @include border-top-radius(5px);
      @include border-bottom-radius(5px);
      @include border-left-radius(5px);
      @include border-right-radius(5px);
      height: 50px;

      declarations available to the transitions mixin
      &amp;:hover {
      background-color: blue;
      @include border-top-radius(25px);
      @include border-bottom-radius(25px);
      @include border-left-radius(25px);
      @include border-right-radius(25px);
      }
//  }
</code></pre>

<h4>Screenshots</h4>

<h4>Normal state</h4>

<p><img src="/images/bourbon-mixins/transition-mixin-red.png"></p>

<p>It transitions over the specified time -> Here 1.0s</p>

<p><img src="/images/bourbon-mixins/transition.gif"></p>

<h4>Hover state after transition</h4>

<p><img src="/images/bourbon-mixins/transition-mixin-blue.png"></p>

<p>You can handpick the properties you want to be affected by the transition. Instead of  <strong>all</strong> use only the properties you need.</p>

<pre><code class="sass ">// all
@include transition (all 1.0s ease-in-out);

// fine-tuned
@include transition (background-color, height 1.0s ease-in-out);
</code></pre>

<p>To fine-tune transitional behaviour there are a number of very convenient <strong>timing-functions</strong> at your disposal:</p>

<p><img src="/images/bourbon-mixins/timing-functions.gif"></p>

<h2></h2>

<ul>
<li><h3>font-face mixin</h3></li>
</ul>


<p>As we know, typography is an essential piece of the puzzle of designing high quality projects for the web. As a kind of atomic structure it guides so many design decisions and can influence the perception of the user in a multitude of ways.</p>

<p><strong>@font-face</strong> allows designers to <strong>customize type</strong> an incredible amount by providing users with custom fonts which they might not have installed on their machines.</p>

<p>In the past I went to <a href="http://fontsquirrel.com">fontsquirrel</a>, which is awesome btw, used the <strong>webfont generator</strong> and pasted a lot of CSS like this into my stylesheets. Those days are gone.</p>

<pre><code class="scss styles generated by webfont generator pasted into a classic CSS stylesheet">@font-face {
    font-family: 'SourceSansPro-Regular';
    src: url('sourcesanspro-regular.eot');
    src: url('sourcesanspro-regular.eot?#iefix') format('embedded-opentype'),
         url('sourcesanspro-regular.woff') format('woff'),
         url('sourcesanspro-regular.ttf') format('truetype'),
         url('sourcesanspro-regular.svg#source_sans_proregular') format('svg');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'SourceSansPro-Bold';
    src: url('sourcesanspro-bold.eot');
    src: url('sourcesanspro-bold.eot?#iefix') format('embedded-opentype'),
         url('sourcesanspro-bold.woff') format('woff'),
         url('sourcesanspro-bold.ttf') format('truetype'),
         url('sourcesanspro-bold.svg#source_sans_probold') format('svg');
    font-weight: normal;
    font-style: normal;
}

// applied custom fonts to some classes

.regular-font {
  font-family: SourceSansPro-Regular;
}

.bold-font {
  font-family: SourceSansPro-Bold;
}
</code></pre>

<p>Obviously this can get very tedious very quickly. Using Bourbon, it looks like this now:</p>

<pre><code class="sass font-face mixin">+font-face(SourceSansPro-Regular, 'SourceSansPro/sourcesanspro-regular', normal, $asset-pipeline: true) 
+font-face(SourceSansPro-Bold, 'SourceSansPro/sourcesanspro-bold', bold, $asset-pipeline: true)

.regular-font 
  font-family: SourceSansPro-Regular

.bold-font 
  font-family: SourceSansPro-Bold

//  SCSS syntax
//  @include font-face(SourceSansPro-Regular, 'SourceSansPro/sourcesanspro-regular', normal, $asset-pipeline: true); 
    @include font-face(SourceSansPro-Bold, 'SourceSansPro/sourcesanspro-bold', bold, $asset-pipeline: true); 

    .regular-font {
      font-family: SourceSansPro-Regular;
    }

    .bold-font {
      font-family: SourceSansPro-Bold;
//  }
</code></pre>

<p>Boom!! That easy!</p>

<h3>Under The Hood:</h3>

<p>This mixin expects you to provide</p>

<ul>
<li>a <strong>fonts</strong> folder in assetts: <strong>app/assets/fonts</strong> where you store your webfonts
â€” which I still generate with the <strong>webfont generator</strong> from <strong>fontsquirrel</strong> ->  eot, ttf, woff, svg formats of uploaded typefaces.</li>
</ul>


<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/app-assets-fonts.png"></p>

<ul>
<li><p>a <strong>font-family</strong> name for later use in your declarations
â€” can be any name you wish. Above I used <strong>SourceSansPro-Regular</strong> for example</p></li>
<li><p>a <strong>file-path</strong> to find the custom font on the machine</p></li>
<li><p><strong>font-weight</strong> like <em>normal</em> or <em>bold</em></p></li>
<li><p><strong>font-style</strong> like <em>normal</em>, <em>italic</em> or <em>oblique</em> ( maybe avoid oblique type! )</p></li>
<li><p>and a hash for using the <strong>asset-pipeline</strong> with rails or not</p></li>
</ul>


<pre><code class="sass Breaking down the parts">             //font-family name      file-path                          weight  style 
+font-face(NameFor-font-family, 'SomeFontFolder/NameOfFont-Italic', normal, italic, $asset-pipeline: true)

// SCSS syntax
// @include font-face(NameFor-font-family, 'SomeFontFolder/NameOfFont-Italic', normal, italic, $asset-pipeline: true);
</code></pre>

<h3>Attention!</h3>

<ul>
<li>The order of the includes matters, and it is:</li>
</ul>


<p><strong>normal, bold, italic, bold+italic</strong></p>

<ul>
<li>Do not use forward slashes for the folder your fonts are stored in!!
It will fail like this:</li>
</ul>


<pre><code class="sass ">                                       !!!
+font-face(SourceSansPro-Regular, '/SourceSansPro/sourcesanspro-regular', normal, $asset-pipeline: true) 

//  SCSS syntax
//  @include font-face(/SourceSansPro-Regular, '/SourceSansPro/sourcesanspro-regular', normal, $asset-pipeline: true); 
</code></pre>

<h2>Cheers!</h2>

<p>I have prepared another article about Bourbon&rsquo;s mixins: <li><a href="/blog/2014/01/27/bourbon-mixins-02/">Bourbon: Mixins #02</a></li></p>

<p><img src="/images/bourbon-mixins/github-bourbon.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bourbon - Connoisseursâ€™s Choice Sass Mixins]]></title>
    <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/01/bourbon-sass-introduction/"/>
    <updated>2015-07-01T19:34:54+02:00</updated>
    <id>http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/01/bourbon-sass-introduction</id>
    <content type="html"><![CDATA[<p><img src="/images/bourbon-mixins/david_niven.jpg" width="600" height="360" title="" ></p>

<p><a href="http://bourbon.io/"><img src="/images/bourbon-mixins/bourbon-logo@2x.png" width="250" height="450"></a></p>

<h2>Whatâ€™s ahead?</h2>

<ul>
<li><strong>Introduction</strong></li>
<li><a href="#setup"><strong>Setup</strong></a></li>
<li><a href="#mixins"><strong>Mixins Overview</strong></a></li>
<li><a href="#functions"><strong>Functions Overview</strong></a></li>
<li><a href="#addons"><strong>Add-ons</strong></a></li>
<li><a href="#conclusion"><strong>Conclusion</strong></a></li>
</ul>


<h2>An Introduction</h2>

<p><a href="http://bourbon.io">Bourbon</a> is a top-notch Sass <strong>library for designers</strong>. It has a minimalistic approach and is serious about creating quality code that cares about <strong>semantics</strong>. I like it especially because it encourages best practices for developing great code that scales.</p>

<p>This gem helps <strong>designers</strong> to write their code faster and manages a lot of the nitty-gritty details like annoying <strong>vendor prefixes</strong>. Itâ€™s mixins often act as wrappers for outputting quality CSS but stay as vanilla as possible by being close to the original CSS syntax.</p>

<!--more-->


<p>Big heavyweight frameworks like <a href="http://getbootstrap.com">Bootstrap</a> certainly have their charms. Developers like them because most design decisions are already made and reasonably decent looking websites come out pretty much prefabricated. Nothing wrong with that - given that you want to bootstrap your project without a designer who values <strong>semantic markup</strong>. I should mention though that once designers are involved, they might not be happy with that choice. Having to manually rip out unsemantic styles that are intermingled with your markup might give them ideas for putting funny stuff in your coffee.</p>

<h3>Worth Pointing Out</h3>

<ul>
<li>Bourbon is <strong>pure Sass &amp; platform agnostic</strong> -> works with any Sass project</li>
<li>Very close to actual CSS syntax -> Vanilla</li>
<li>Not tied to Ruby ( unlike Compass )</li>
<li>Includes awesome <strong>functions</strong></li>
<li>Outsources <strong>vendor prefixes</strong></li>
<li>Itâ€™s super lightweight</li>
<li>Itâ€™s <strong>Semantic</strong></li>
</ul>


<h2><a name='setup'></a>Setup</h2>

<ul>
<li>Fire up your terminal, change into your projectâ€™s directory and install Bourbon via RubyGems</li>
</ul>


<pre><code class="bash Terminal">$ gem install bourbon
</code></pre>

<ul>
<li>Change into your projectâ€™s stylesheets directory and generate your <strong>bourbon folder</strong></li>
</ul>


<pre><code class="bash Terminal">$ bourbon install
</code></pre>

<h6>This command generates a bourbon folder that contains the functions, mixins, helpers, settings, etc that you need. Do yourself a favor and donâ€™t touch this folder. You will have a much better experience updating Bourbon in the future.</h6>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-introduction/bourbon-install-generated-folder.png"></p>

<ul>
<li>You need to finish the setup by importing the generated sass files in your stylesheets. Import Bourbon on top of your <strong>application.sass</strong> file and make sure you only import other Sass files below.</li>
</ul>


<pre><code class="sass application.sass">@import 'bourbon/bourbon'
@import 'other-sass-partials-below'
</code></pre>

<h2><a name='mixins'></a>Mixins Overview</h2>

<p>Bourbon has a wide range of super useful mixins to speed up your work. In terms of design, itâ€™s safe to say that they want to support your own design decisions without forcing a particular style on you. You are basically encouraged to mix your own awesomesauce. You can use these mixins as a stable and relatively neutral basis.
Here are a couple of mixins you might wanna check out first:</p>

<ul>
<li><strong>background-image</strong></li>
<li><strong>border-radius</strong></li>
<li><strong>box-sizing</strong></li>
<li><strong>linear-gradient</strong></li>
<li><strong>transitions</strong></li>
<li><strong>animations</strong></li>
<li><strong>font-face</strong></li>
<li><strong>button</strong></li>
<li><strong>triangle</strong></li>
<li><strong>retina-image</strong></li>
<li><strong>position</strong></li>
<li><strong>size</strong></li>
<li><strong>clearfix</strong></li>
<li><strong>inline-block</strong></li>
</ul>


<p>Learn more about individual Bourbon mixins in my other articles here:</p>

<p><a href="/blog/2014/01/17/bourbon-mixins/">Bourbon: Mixins #01</a></p>

<p><a href="/blog/2014/01/27/bourbon-mixins-02/">Bourbon: Mixins #02</a></p>

<h2><a name='functions'></a>Functions Overview</h2>

<p>Sass already has a ton of built-in functions, from manipulating strings to messing with opacity and colors. Bourbon adds a couple of selected enhancements and provides very handy Sass functions for a variety of use cases. Take a look a this selection:</p>

<ul>
<li><h3><strong>golden-ratio()</strong></h3></li>
</ul>


<p>Want to calculate the golden ratio of a certain number? (slowly depricated though)</p>

<ul>
<li><h3><strong>linear-gradient()</strong> &amp; <strong>radial-gradient()</strong></h3></li>
</ul>


<p>Need a linear- or radial-gradient for your background-image mixin?</p>

<p>You might already be familiar with Sass&rsquo;s built in functions for colors like <strong>lighten()</strong> and <strong>darken()</strong> which do exactly what you&rsquo;d expect.
Bourbon provides two additional awesome color functions for your convenience:</p>

<ul>
<li><h3><strong>tint()</strong> &amp; <strong>shade()</strong></h3></li>
</ul>


<p>The tint function changes a color by mixing it with <strong>white</strong>.
The shade function changes a color by mixing it with <strong>black</strong>.
Both functions take a <strong>color</strong> and <strong>percentage</strong> parameter to fine-tune the color mix.</p>

<ul>
<li><h3><strong>modular-scale()</strong></h3></li>
</ul>


<p>If you are into &ldquo;<em>more meaningful typography</em>&rdquo; and want to calculate a modular scale for varying font sizes that have some sort of numerical relationship, <strong>modular-scale()</strong> might become your new best friend.</p>

<ul>
<li><h3><strong>em()</strong></h3></li>
</ul>


<p>Calculates <strong>pixels to ems</strong> for you.</p>

<p>I have prepared a more detailed look at functions here:
<a href="/blog/2014/01/29/bourbon-functions/">Bourbon: Functions</a></p>

<h2><a name='addons'></a>Add-ons</h2>

<p>A small collection of useful variables:</p>

<ul>
<li><h3><strong>font-family variables</strong></h3>

<ul>
<li>font-family: $helvetica;</li>
<li>font-family: $georgia;</li>
<li>font-family: $lucida-grande;</li>
<li>font-family: $monospace;</li>
<li>font-family: $verdana;</li>
</ul>
</li>
</ul>


<p>Bourbon defines a set of default variables for font-families.
Instead of typing â€”</p>

<pre><code class="sass traditional way of defining fonts">font-family: "Helvetica Neue", Helvetica, Arial, sans-serif
</code></pre>

<p>â€” you just use one of the font-family variables.</p>

<pre><code class="sass font-family variable">font-family: $helvetica
</code></pre>

<ul>
<li><h3><strong>timing variables</strong></h3></li>
</ul>


<p>A mixin like <strong>transition</strong> has the following syntax:</p>

<pre><code class="sass">.some-element
  +transition(all 5s $ease-in-circ)

//  SCSS syntax
//  .some-element {
      @include transition(all 5s $ease-in-circ);
//  }
</code></pre>

<p>The last parameter defines itâ€™s <strong>timing</strong>. You can fine-tune the transitional behaviour by providing one of 24 variables to control timing. The GIF belows illustrates the options best:</p>

<p><img src="/images/bourbon-mixins/timing-functions.gif"></p>

<h2><a name='conclusion'></a>Conclusion</h2>

<p>Do your future self and your colleagues a favor and give <a href="http://bourbon.io">Bourbon</a> a shot. This gem puts a high value on <strong>semantic markup</strong> while being <strong>lightweight &amp; simple</strong>. It will serve you well with your design and CSS architecture plus it aids cultivating best practices for creating superb code.</p>

<p><img src="/images/bourbon-mixins/LaForge.gif" width="600"></p>
]]></content>
  </entry>
  
</feed>
