<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sass | Drafts Previewer]]></title>
  <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/categories/sass/atom.xml" rel="self"/>
  <link href="http://vis-kid.github.io/octopress_drafts_previewer/"/>
  <updated>2015-07-06T23:59:23+02:00</updated>
  <id>http://vis-kid.github.io/octopress_drafts_previewer/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bourbon - Mixins #02]]></title>
    <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/10/bourbon-mixins-02/"/>
    <updated>2015-07-10T16:23:35+02:00</updated>
    <id>http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/10/bourbon-mixins-02</id>
    <content type="html"><![CDATA[<p><img src="/images/bourbon-mixins/bourbon-mixins02.jpg" width="550"></p>

<p><a href="http://bourbon.io/"><img src="/images/bourbon-mixins/bourbon-logo@2x.png" width="250" height="450"></a></p>

<h2>Another Short List Of Goodies</h2>

<ul>
<li><a href="#inline-block"><strong>inline-block mixin</strong></a></li>
<li><a href="#position"><strong>position mixin</strong></a></li>
<li><a href="#triangle"><strong>triangle mixin</strong></a></li>
<li><a href="#clearfix"><strong>clearfix mixin</strong></a></li>
<li><a href="#button"><strong>button mixin</strong></a></li>
<li><a href="#size"><strong>size mixin</strong></a></li>
<li><a href="#hidpi"><strong>HiDPI-media-query mixin</strong></a></li>
<li><a href="#retina"><strong>retina-image mixin</strong></a></li>
</ul>


<p>Let’s take a look at these mixins in more detail as well.</p>

<!-- more -->


<p><em>Examples below represent not necessarily best design practices but are chosen for exploring the basic functionality of these mixins.</em></p>

<h2></h2>

<ul>
<li><h2><a name='inline-block'></a>inline-block mixin</h2></li>
</ul>


<pre><code class="html paragraphs’ default display behaviour is block">  &lt;p class='paragraphs-behave-like-blocks'&gt;
    Yada yada yada
  &lt;/p&gt;

  &lt;p class='paragraphs-behave-like-blocks'&gt;
    Yada yada yada
  &lt;/p&gt;
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/display-block.png"></p>

<p>Block-level elements, like paragraphs, automatically create a new row in the layout.</p>

<p>This mixin comes in handy if you want to change the <strong>default display behaviour</strong> of elements to <strong>inline-block</strong>, instead of floating elements for example. It not only sets <strong>display: inline-block</strong> but also takes care of quirks and legacy support for IE7.</p>

<p>Learn more about <a href="http://designshack.net/articles/css/whats-the-deal-with-display-inline-block/">display</a> here.</p>

<pre><code class="sass blocks with float-like behaviour through inline-block">.paragraphs-behave-like-blocks
  +inline-block
  background-color: tomato

//  SCSS syntax
//  .paragraphs-behave-like-blocks {
      @include inline-block;
//  }
</code></pre>

<p>Take a look at the generated CSS output. Who wants to remember nasty stuff like that.</p>

<pre><code class="css CSS output">.paragraphs-behave-like-blocks {
  display: inline-block;
  vertical-align: baseline;
  zoom: 1;
  *display: inline;
  *vertical-align: auto;
  background-color: tomato;
}
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/display-block-inline.png" width="400"></p>

<p>Set to display: inline-block, the paragraphs get displayed inline but retain their block-level characteristics. Alternative to floating elements — Check!</p>

<h3>Attention</h3>

<p>Notice the whitespace between the block elements. If you’d be using <strong>float</strong>, you wouldn’t see any whitespace. It’s a kind of default whitespace that doesn’t go away by setting margins to 0px. Instead set <strong>margins to -4px</strong> if you want to get rid of it.</p>

<h2></h2>

<ul>
<li><h2><a name='position'></a>position mixin</h2></li>
</ul>


<p>This mixin is a shorthand for writing something like this —</p>

<pre><code class="sass">.some-element
  position: relative
  top: 0px
  left: 100px
</code></pre>

<p>— in just one line</p>

<pre><code class="sass">.some-element      
  +position(relative, 0px 0 0 100px)
                    //top right bottom left

// SCSS syntax
   .some-element
//   @include position(relative, 0px 0 0 100px);
</code></pre>

<p>That’s it. No magic, but still super useful. Keeping stylesheets simple and readable pays off over time.</p>

<h2></h2>

<ul>
<li><h2><a name='triangle'></a>triangle mixin</h2></li>
</ul>


<p>Want to use CSS <strong>triangles</strong> without fiddling around? There is certainly no need to use images for the job.</p>

<p>It’s easy as pie with this:</p>

<pre><code class="sass">.triangle
  +triangle(25px, tomato, down)
         // size, color, direction

// SCSS syntax
   .triangle {
     @include triangle(25px, tomato, down);
// }
</code></pre>

<p>The third parameter defines the direction.
Options for this mixin include:</p>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/triangles.png" width="400"></p>

<p><strong>down</strong> — <strong>up</strong> — <strong>left</strong> — <strong>right</strong></p>

<p><strong>up-right</strong> — <strong>up-left</strong> — <strong>down-right</strong> — <strong>down-left</strong></p>

<p>You can even define a second color if you need a background color for your triangle.</p>

<h2></h2>

<ul>
<li><h2><a name='clearfix'></a>clearfix mixin</h2></li>
</ul>


<p>Wrappers that have floated elements inside have the <a href="http://complexspiral.com/publications/containing-floats/"><strong>zero-height container problem</strong></a> — in essence the container element inflates to zero pixels if all its elements inside are floated and therefore taken out of the containers <em>flow</em>, which leaves nothing left to fill the container -> inflates to zero.</p>

<p>The clearfix mixin takes care of this when <strong>applied to the container / wrapper element</strong>. The best thing about this is that it doesn’t require addional &ldquo;empty&rdquo; markup to accomodate the clearfix. It stays semantic by just adding the clearfix in your stylesheets.</p>

<p>Take a look at this very simple example:</p>

<pre><code class="html">  &lt;div class='grey-wrapper'&gt;
    &lt;div class='logos'&gt;
</code></pre>

<pre><code class="sass">$light-grey: #D4D4D4

.grey-wrapper
  background-color: $light-grey
  +clearfix        
  .logos
    float: right
    +background-image(url("bourbon-logo@2x.png"), url("thoughtbot.png"))
    background-position: center top, top left
    background-repeat: repeat-y, repeat-x
    height: 220px
    width: 50%

// SCSS syntax
// .grey-wrapper {
     @include clearfix;
     background-color: $light-grey;
     .logos {
       float: right;
       @include background-image(url("bourbon-logo@2x.png"), url("thoughtbot.png"));
       background-position: center top, top left;
       background-repeat: repeat-y, repeat-x;
       height: 220px;
       width: 50%;
     }
// } 
</code></pre>

<h3>Using clearfix</h3>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/with-clearfix.png"></p>

<p>The grey container expands to hold the floated logos in it.</p>

<h3>Without clearfix</h3>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/no-clearfix.png"></p>

<p>The grey container inflates to zero pixels because there is nothing in its &ldquo;flow&rdquo; to fill it. The wrapper is still there but you can’t see it.</p>

<h3>Under The Hood</h3>

<p>If you take a look at the source code it becomes clear how this <strong>micro clearfix</strong> works:</p>

<pre><code class="sass source code https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_clearfix.scss">@mixin clearfix {
  &amp;:after {
    content:"";
    display:table;
    clear:both;
  }
}
</code></pre>

<p>Instead of creating an &ldquo;empty&rdquo; tag in your markup right before the closing tag of the container element and apply a clearfix there, this mixin uses the <strong>&amp;:after</strong> pseudo element and places an <strong>empty string</strong> at the very end of the container and clears the float. That way it mimics content after the logo and tricks the browser to expand the grey container to surround other elements inside.</p>

<h2></h2>

<ul>
<li><h2><a name='button'></a>button mixin</h2></li>
</ul>


<p>Need high quality buttons out of the box?</p>

<h4>Standard Button</h4>

<p><img src="/images/bourbon-mixins/bourbon-buttons/bourbon-button.png" width="250"></p>

<pre><code class="html">  &lt;div class='super-duper-button'&gt;Super duper button&lt;/div&gt;
</code></pre>

<pre><code class="sass standard button">$light-blue: #2485F1 

.super-duper-button
  +button($light-blue)

// SCSS syntax
// .super-duper-button {
     @include button($light-blue);
// }
</code></pre>

<p>That’s it, simple and semantically clean buttons. They even come with great looking subtle hover effects.</p>

<p>There are two more options:</p>

<h4>Pill Button</h4>

<p><img src="/images/bourbon-mixins/bourbon-buttons/pill-button.png" width="250"></p>

<pre><code class="html">  &lt;div class='super-duper-button'&gt;Super duper pill button&lt;/div&gt;
</code></pre>

<pre><code class="sass pill button">$dark-pink: #6B32D1

.super-duper-button
  +button(pill, $dark-pink)

// SCSS syntax
// .super-duper-button {
     @include button(pill, $dark-pink);
// }
</code></pre>

<h4>Shiny Button</h4>

<p><img src="/images/bourbon-mixins/bourbon-buttons/shiny-button.png" width="250"></p>

<pre><code class="html">  &lt;div class='super-duper-button'&gt;Super duper shiny button&lt;/div&gt;
</code></pre>

<pre><code class="sass shiny button">$acceptance-green: #43C914 

.super-duper-button
  +button(shiny, $acceptance-green)

// SCSS syntax
// .super-duper-button {
     @include button(shiny, $acceptance-green);
// }
</code></pre>

<h3>Attention!</h3>

<p>Please note that the text on the buttons automatically changes its color depending on the <strong>lightness</strong> of the base-color of the button. That way the mixin provides better <strong>contrast and readability</strong>. Awesome!</p>

<p><img src="/images/bourbon-mixins/bourbon-buttons/grey-shiny-button.png" width="250"></p>

<pre><code class="sass text adapts to the color of the button ">$light-grey: #DEDEDE

.super-duper-button
  +button(shiny, $light-grey)

// SCSS syntax
// .super-duper-button {
     @include button(shiny, $light-grey);
// }
</code></pre>

<h2></h2>

<ul>
<li><h2><a name='size'></a>size mixin</h2></li>
</ul>


<p>Want to define <strong>width</strong> and <strong>height</strong> in one declaration?
All you need to do is:</p>

<pre><code class="sass size mixin">.small-article
  +size(300, 400)

// SCSS syntax
// .small-article {
     @include size(300, 400);
// }
</code></pre>

<h4>CSS Output</h4>

<pre><code class="css output">.small-article {
  width: 300px;
  height: 400px;
}
</code></pre>

<p>You can provide <strong>px</strong> values or just numerical values.
Of course you can use <strong>auto</strong> for these values as well.
If you provide only one size, Bourbon assumes you want a square.</p>

<pre><code class="sass square">.square
  +size(25px)

// SCSS syntax
// .square {
     @include size(25px);
// }
</code></pre>

<h2></h2>

<ul>
<li><h2><a name='hidpi'></a>HiDPI mixin</h2></li>
</ul>


<p>If you want to quickly generate completely vendor prefixed media queries for detecting <strong>HiDPI</strong> ( &ldquo;Retina&rdquo; ) devices, this mixin comes in handy.</p>

<p>All you need to do is provide a target <strong>device pixel ratio</strong> and declarations that change if the media query detects devices with this or higher ratio. The default ratio is 1.3.</p>

<pre><code class="sass HiDPI-media-query">.image
  width: 150px
  +hidpi(1.5)
    width: 200px

// SCSS syntax
// .image {
     width: 150px;
     +hidpi(1.5) {
       width: 200px;
     }
// }
</code></pre>

<pre><code class="sass CSS output">.image {
  width: 150px;

  @media only screen and (-webkit-min-device-pixel-ratio: 1.5),
    only screen and (min--moz-device-pixel-ratio: 1.5),
    only screen and (-o-min-device-pixel-ratio: 1.5/1),
    only screen and (min-resolution: 144dpi),
    only screen and (min-resolution: 1.5dppx) {

    width: 200px;
  } 
}
</code></pre>

<p>Pretty cool! Slimmed down repetitive code quite a bit.</p>

<h2></h2>

<ul>
<li><h2><a name='retina'></a>retina-image mixin</h2></li>
</ul>


<p>Depending on the <strong>pixel density</strong> of the device displaying your designs, you can provide images with the <strong>appropriate bitmap resolution</strong>. This fine mixin provides a <strong>retina background-image</strong> or a <strong>non-retina background-image</strong> — depending on the result of the mixin’s internal <strong>HiDPI-media-query</strong> checking the device for its pixel density.</p>

<p>If I’m not mistaken, as a bonus, it will serve only one of the images to avoid downloading both — which is especially advantageous for <strong>mobile devices</strong> with lower pixel densities. If the above is all <em>gobbledygook</em> to you, I’d recommend starting with this fantastic <a href="http://coding.smashingmagazine.com/2012/08/20/towards-retina-web/">article.</a></p>

<pre><code class="sass retina-image syntax">.logo
  +retina-image(logo-icon, 50px, 30px)

// SCSS syntax
// .logo {
     @include retina-image(logo-icon, 50px, 30px);
// }
</code></pre>

<p>The CSS output helps explain its functionality:</p>

<pre><code class="css CSS output">.logo {
  background-image: url(logo-icon.png); 
}

@media only screen and (-webkit-min-device-pixel-ratio: 1.3), 
       only screen and (min--moz-device-pixel-ratio: 1.3), 
       only screen and (-o-min-device-pixel-ratio: 1.3 / 1), 
       only screen and (min-resolution: 125dpi), 
       only screen and (min-resolution: 1.3dppx) {
  .logo {
    background-image: url(logo-icon_2x.png);
    background-size: 50px 30px; 
  }
}
</code></pre>

<p>The default of using a <strong>device pixel ratio of 1.3</strong> targets Apple &ldquo;Retina&rdquo; devices (ratio of 2) as well as devices with pixel ratios as &ldquo;low&rdquo; as 1.3.</p>

<p>This mixin expects a <strong>.png</strong> as standard extension for all images. Per default, it also expects a <strong>_2x.png</strong> extension to the filename of your retina-image. Of course you can overwrite both defaults by providing another retina-filename and standard extension like this:</p>

<pre><code class="sass ">.logo                                     
  +retina-image(logo-icon, 50px, 30px, 
                $extension: jpg, 
                $retina-filename: HiDPI-logo-icon, 
                $retina-suffix: _retina )

// SCSS syntax
// .logo {
     @include retina-image(logo-icon, 50px, 30px, 
                $extension: jpg, 
                $retina-filename: HiDPI-logo-icon, 
                $retina-suffix: _retina );
// }
</code></pre>

<pre><code class="css CSS output">.logo {
  background-image: url(logo-icon.jpg); 
}

@media only screen and (-webkit-min-device-pixel-ratio: 1.3), 
       only screen and (min--moz-device-pixel-ratio: 1.3), 
       only screen and (-o-min-device-pixel-ratio: 1.3 / 1), 
       only screen and (min-resolution: 125dpi), 
       only screen and (min-resolution: 1.3dppx) {
  .logo {
    background-image: url(HiDPI-logo-icon_retina.jpg);
    background-size: 50px 30px; 
  }
}
</code></pre>

<p>There is another option if you are using the asset pipeline in Rails:</p>

<pre><code class="sass ">.logo                                     
  +retina-image(logo-icon, 50px, 30px,
                $asset-pipeline: true)

// SCSS syntax
// .logo {
     @include retina-image(logo-icon, 50px, 30px,
                           $asset-pipeline: true);
// }
</code></pre>

<pre><code class="css CSS output">.logo {
  background-image: url(logo-icon.png); 
}

@media only screen and (-webkit-min-device-pixel-ratio: 1.3), 
       only screen and (min--moz-device-pixel-ratio: 1.3), 
       only screen and (-o-min-device-pixel-ratio: 1.3 / 1), 
       only screen and (min-resolution: 125dpi), 
       only screen and (min-resolution: 1.3dppx) {
  .logo {          /* Attention! */
    background-image: image-url(logo-icon_2x.png);
    background-size: 50px 30px; 
  }
}
</code></pre>

<h3>*Attention!</h3>

<p>Notice that in the CSS output <strong>url</strong> is replaced with <strong>image-url</strong>. This is a rails helper method that translates to  <strong>url(/assets/logo-icon_2x.png)</strong>.
It’s a small difference but adds to your convenience developing with rails if you are using the <strong>asset pipeline</strong>.</p>

<h3>Critique</h3>

<p>The documentation says</p>

<p><blockquote><p>&ldquo;The mixin is a helper to generate a retina background-image and non-retina background-image.&rdquo;</p><footer><strong>#retina-image <a href="http://bourbon.io/docs/#retina-image">http://bourbon.io/docs/#retina-image</a> Bourbon documentation</strong></footer></blockquote></p>

<p>I think its fair to say that this is confusing because the mixin does not generate the &ldquo;Retina&rdquo; image itself. You still have to render the image with the appropriate amount of bitmap pixels that you need for larger resolution screens in your favorite graphics editing program yourself.</p>

<p>In that regard, what this mixin generates is a consistent naming schema for the <strong>values</strong> of <strong>background-image properties</strong> which expect to be able to <strong>serve images with higher resolutions</strong> from your <strong>assets</strong> if the media-query encounters devices with a <strong>device pixel ratio</strong> of <strong>1.3</strong> or higher.</p>

<h2></h2>

<p>That’s it for mixins. Next I will look into functions: <li><a href="/blog/2014/01/29/bourbon-functions/">Bourbon: Functions</a></li></p>

<p><img src="/images/bourbon-mixins/bourbon-anime.gif" width="700"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bourbon - Mixins #01]]></title>
    <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/05/bourbon-mixins/"/>
    <updated>2015-07-05T20:55:32+02:00</updated>
    <id>http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/05/bourbon-mixins</id>
    <content type="html"><![CDATA[<p><img src="/images/bourbon-mixins/bourbon-mixins.jpg" width="550"></p>

<p><a href="http://bourbon.io/"><img src="/images/bourbon-mixins/bourbon-logo@2x.png" width="250" height="450"></a></p>

<h2>A Short List Of Goodies</h2>

<ul>
<li><a href="#background-image"><strong>background-image mixin</strong></a></li>
<li><a href="#linear-gradient"><strong>linear-gradient mixin</strong></a></li>
<li><a href="#border-radius"><strong>border-radius mixin</strong></a></li>
<li><a href="#box-sizing"><strong>box-sizing mixin</strong></a></li>
<li><a href="#transition"><strong>transition mixin</strong></a></li>
<li><a href="#font-face"><strong>font-face mixin</strong></a></li>
</ul>


<!-- more -->


<p>Let&rsquo;s take a look at these mixins in more detail.</p>

<p><em>The examples below represent not necessarily best design practices but are chosen for exploring the basic functionality of these mixins</em>.</p>

<h2></h2>

<ul>
<li><h2><a name='background-image'></a>background-image mixin</h2></li>
</ul>


<p>Creates a background-image property comprised out of multiple ( 1 up to 10 ) comma delimited <strong>background images</strong> and / or <strong>linear- / radial-gradients</strong>.</p>

<h5>With images</h5>

<p>``` html</p>

<p><div class='ridiculous-background'>
```</p>

<pre><code class="sass background-image mixin with images">.ridiculous-background
  +background-image(url("bourbon-logo@2x.png"), url("thoughtbot-logo.png"))

  // chain the positions for the images
  background-position: center top, top left
  // chain the repeat values
  background-repeat: repeat-y, repeat-x

  height: 560px

//  SCSS syntax
//  .ridiculous-background {
      @include background-image(url("bourbon-logo@2x.png"), url("thoughtbot-logo.png"));
      background-position: center top, top left;
      background-repeat: repeat-y, repeat-x;
      height: 560px;
//  }
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/background-image-mixin.png"></p>

<h3>Attention!</h3>

<p>Take a look at the precedence of layers -> The first image gets displayed on top.
The same goes for gradients.</p>

<h4>Shorthand notation</h4>

<p>You can use a shorthand notation for <strong>background-image</strong> like this:</p>

<pre><code class="sass shorthand notation for background-image mixin">.ridiculous-background
  +background(url("bourbon-logo@2x.png"), url("thoughtbot-logo.png")) 

//  SCSS syntax
//  .ridiculous-background
//    @include background(url("bourbon-logo@2x.png"), url("thoughtbot-logo.png")); 
</code></pre>

<h4>With gradients</h4>

<p>You can make use of Bourbon’s <strong>linear-gradient function</strong> inside the background-image mixin.</p>

<pre><code class="html ">&lt;section class='super-duper-gradient'&gt;
</code></pre>

<pre><code class="sass background-image mixin with gradients">.super-duper-gradient
    +background-image(
  // linear-gradient function
  linear-gradient(hsla(0, 100%, 100%, 0.25) 0%, hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), 
  linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)))
  height: 50px

//  SCSS syntax
//  .super-duper-gradient {
      @include background-image(
      linear-gradient(hsla(0, 100%, 100%, 0.25) 0%, hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), 
      linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)));
      height: 50px;
//  }
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/backgroud-image_gradient.png"></p>

<h2></h2>

<ul>
<li><h2><a name='linear-gradient'></a>linear-gradient mixin</h2></li>
</ul>


<p>This little fella can take up to 10 color stops and takes percent values if you want to fine tune the color distribution.</p>

<pre><code class="html ">&lt;section class='simple-gradient'&gt;
</code></pre>

<pre><code class="sass linear-gradient mixin">$start-gradient-color: #268BD2
$end-gradient-color: #7229d1

.simple-gradient
  +linear-gradient($start-gradient-color, $end-gradient-color)
  height: 200px

//  SCSS syntax
//  .simple-gradient {
      @include linear-gradient($start-gradient-color, $end-gradient-color)
      height: 200px;
//  }
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/linear-gradient-mixin.png"></p>

<h2></h2>

<p>You can also provide an optional first argument to control the direction (in degrees) of the gradient.</p>

<pre><code class="sass linear-gradient mixin">$start-gradient-color: #268BD2
$end-gradient-color: #7229d1

.simple-gradient
  +linear-gradient(-90deg, $start-gradient-color, $end-gradient-color)
  height: 200px

//  SCSS syntax
//  .simple-gradient {
      @include linear-gradient(-90deg, $start-gradient-color, $end-gradient-color)
      height: 200px;
//  }
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/linear-gradient-mixin-direction.png"></p>

<h2></h2>

<ul>
<li><h2><a name='border-radius'></a>border-radius mixin</h2></li>
</ul>


<p>This handy mixin makes it straightforward to target the corners of a box in pairs: top, bottom, right and left corners basically. If you want rounded corners and avoid typing repetitive declarations, this one is your friend.</p>

<pre><code class="html ">&lt;section class='super-duper-borders'&gt;
</code></pre>

<pre><code class="sass border-radius mixin">.super-duper-borders
  +background-image(
  linear-gradient(hsla(0, 100%, 100%, 0.25) 0%, hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), 
  linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)))

  // border-radii for every corner
  +border-top-radius(3px)
  +border-bottom-radius(3px)

  height: 50px


//  SCSS syntax
//  .super-duper-borders {
      @include background-image(
      linear-gradient(hsla(0, 100%, 100%, 0.25) 0%, hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), 
      linear-gradient(#4e7ba3, darken(#4e7ba4, 10%)));

      @include border-top-radius(3px);
      @include border-bottom-radius(3px);

      height: 50px;
//  } 
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/border-radius-mixin.png"></p>

<p>Compare both gradients and focus your attention on the lower gradient which now has very subtle <strong>3px rounded corners</strong>. Too much rounding lets designs often look comical. Keep it simple!</p>

<h2></h2>

<p>Of course you can go crazy with border radii. If you put some time into it, you can build some cool stuff with it. Below are a couple of nonsensical examples that should just illustrate how the various options work.</p>

<pre><code class="sass border-radius mixin">.super-duper-borders
  +linear-gradient($start-gradient-color, $end-gradient-color)

  // border-radii for top &amp; bottom corners
  +border-top-radius(600px)
  +border-bottom-radius(100px)
  height: 200px
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/border-radius-mixin-crazy.png"></p>

<h2></h2>

<pre><code class="sass border-radius mixin">.super-duper-borders
  +linear-gradient($start-gradient-color, $end-gradient-color)

  // border-radii for right &amp; left corners
  +border-right-radius(600px)
  +border-left-radius(100px)
  height: 200px
</code></pre>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-mixins/border-radius-mixin-crazy2.png"></p>

<h2></h2>

<ul>
<li><h2><a name='box-sizing'></a>box-sizing mixin</h2></li>
</ul>


<p>Easily change the box model of an element. You have 3 options to choose:</p>

<p><strong>border-box | content-box | inherit</strong></p>

<p>( <a href="http://css-tricks.com/box-sizing/">more about box sizing</a> )</p>

<pre><code class="sass box-sizing mixin ">.user-profile
  +box-sizing(border-box)

//   SCSS syntax
//  .user-profile {
      @include box-sizing(border-box);
//  }
</code></pre>

<h2></h2>

<ul>
<li><h2><a name='transition'></a>transition mixin</h2></li>
</ul>


<p>You attach the transition mixin to the default state of the selector that is to be changed by an event like hover — <strong>not to the pseudo-class!</strong> The declarations used in the pseudo-class are available to the transition mixin.</p>

<pre><code class="html ">&lt;section class='fancy-transition'&gt;
</code></pre>

<pre><code class="sass transition mixin">.fancy-transition 
  +transition (all 1.0s $ease-in-sine)

  height: 50px
  background-color: red
  +border-top-radius(5px)
  +border-bottom-radius(5px)

  &amp;:hover 
  // declarations available to the transitions mixin
  background-color: blue 
  +border-top-radius(25px)
  +border-bottom-radius(25px)

//  SCSS syntax
//  .fancy-transition {
      @include transition (all 1.0s $ease-in-sine);

      height: 50px;
      background-color: red;
      @include border-top-radius(5px);
      @include border-bottom-radius(5px);

      declarations available to the transitions mixin
      &amp;:hover {
      background-color: blue;
      @include border-top-radius(25px);
      @include border-bottom-radius(25px);
      }
//  }
</code></pre>

<h3>Screenshots</h3>

<h4>Normal state</h4>

<p><img src="/images/bourbon-mixins/transition-mixin-red.png"></p>

<p>It transitions over the specified time -> Here 1.0s</p>

<p><img src="/images/bourbon-mixins/transition.gif"></p>

<h4>Hover state after transition</h4>

<p><img src="/images/bourbon-mixins/transition-mixin-blue.png"></p>

<p>You can handpick the properties you want to be affected by the transition. Instead of  <strong>all</strong> use only the properties you need. Different timing-functions for different properties can also be chained together nicely.</p>

<pre><code class="sass ">// all
@include transition (all 1.0s $ease-in-sine);

// fine-tuned
@include transition (background-color 2.0s $ease-in-sine, height 1.0s $ease-out-cubic);
</code></pre>

<h2></h2>

<p>To fine-tune transitional behaviour, there are a number of very convenient Sass variables from Bourbon for various <strong>timing-functions</strong> at your disposal:</p>

<p><img src="/images/bourbon-mixins/timing-functions.gif"></p>

<h2></h2>

<ul>
<li><h2><a name='font-face'></a>font-face mixin</h2></li>
</ul>


<p>As we know, typography is an essential piece of the puzzle of designing high quality projects for the web. As a kind of atomic structure it guides so many design decisions and can influence the perception of the user in a multitude of ways.</p>

<p><strong>@font-face</strong> allows designers to <strong>customize type</strong> an incredible amount by providing users with custom fonts which they might not have installed on their machines.</p>

<p>In the past I went to <a href="http://fontsquirrel.com">fontsquirrel</a>, which is awesome btw, used the <strong>webfont generator</strong> and pasted a lot of CSS like this into my stylesheets. Those days are gone.</p>

<pre><code class="scss styles generated by webfont generator pasted into a classic CSS stylesheet">@font-face {
    font-family: 'SourceSansPro-Regular';
    src: url('sourcesanspro-regular.eot');
    src: url('sourcesanspro-regular.eot?#iefix') format('embedded-opentype'),
         url('sourcesanspro-regular.woff') format('woff'),
         url('sourcesanspro-regular.ttf') format('truetype'),
         url('sourcesanspro-regular.svg#source_sans_proregular') format('svg');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'SourceSansPro-Bold';
    src: url('sourcesanspro-bold.eot');
    src: url('sourcesanspro-bold.eot?#iefix') format('embedded-opentype'),
         url('sourcesanspro-bold.woff') format('woff'),
         url('sourcesanspro-bold.ttf') format('truetype'),
         url('sourcesanspro-bold.svg#source_sans_probold') format('svg');
    font-weight: normal;
    font-style: normal;
}

// applied custom fonts to some classes

.regular-font {
  font-family: SourceSansPro-Regular;
}

.bold-font {
  font-family: SourceSansPro-Bold;
}
</code></pre>

<p>Obviously this can get very tedious very quickly. Using Bourbon, it looks like this now:
(Using Rails with the asset pipeline here)</p>

<pre><code class="sass font-face mixin">+font-face(SourceSansPro-Regular, 'SourceSansPro/sourcesanspro-regular', normal, $asset-pipeline: true) 
+font-face(SourceSansPro-Bold, 'SourceSansPro/sourcesanspro-bold', bold, $asset-pipeline: true)

.regular-font 
  font-family: SourceSansPro-Regular

.bold-font 
  font-family: SourceSansPro-Bold

//  SCSS syntax
//  @include font-face(SourceSansPro-Regular, 'SourceSansPro/sourcesanspro-regular', normal, $asset-pipeline: true); 
    @include font-face(SourceSansPro-Bold, 'SourceSansPro/sourcesanspro-bold', bold, $asset-pipeline: true); 

    .regular-font {
      font-family: SourceSansPro-Regular;
    }

    .bold-font {
      font-family: SourceSansPro-Bold;
//  }
</code></pre>

<p>Boom!! That easy! And a remarkable reduction of code as well.</p>

<h3>Under The Hood:</h3>

<p>This mixin expects you to provide</p>

<ul>
<li>a <strong>fonts</strong> folder where you store your webfonts
— which you can still generate with the <strong>webfont generator</strong> from <strong>fontsquirrel</strong> ->  eot, ttf, woff, svg formats of uploaded typefaces.</li>
</ul>


<h4>Screenshot</h4>

<p>(this example is from a Rails app)</p>

<p><img src="/images/bourbon-mixins/app-assets-fonts.png"></p>

<ul>
<li><p>a <strong>font-family</strong> name for later use in your declarations
— can be any name you wish. Above I used <strong>SourceSansPro-Regular </strong>and <strong>SourceSansPro-Bold</strong> for example</p></li>
<li><p>a <strong>file-path</strong> to find the custom font on the machine</p></li>
<li><p><strong>font-weight</strong> like <em>normal</em> or <em>bold</em></p></li>
<li><p><strong>font-style</strong> like <em>normal</em>, <em>italic</em> or <em>oblique</em> ( maybe avoid oblique type! )</p></li>
<li><p>and a hash for using the <strong>asset-pipeline</strong> in Rails or not</p></li>
</ul>


<pre><code class="sass Breaking down the parts">             //font-family name      file-path                          weight  style 
+font-face(NameFor-font-family, 'SomeFontFolder/NameOfFont-Italic', normal, italic, $asset-pipeline: true)

// SCSS syntax
// @include font-face(NameFor-font-family, 'SomeFontFolder/NameOfFont-Italic', normal, italic, $asset-pipeline: true);
</code></pre>

<h3>Attention!</h3>

<ul>
<li>The order of the includes matters, and it is:</li>
</ul>


<p><strong>normal, bold, italic, bold+italic</strong></p>

<ul>
<li>Do not use forward slashes for the folder your fonts are stored in!!
It will fail like this:</li>
</ul>


<pre><code class="sass ">                                       !!!
+font-face(SourceSansPro-Regular, '/SourceSansPro/sourcesanspro-regular', normal, $asset-pipeline: true) 

//  SCSS syntax
//  @include font-face(/SourceSansPro-Regular, '/SourceSansPro/sourcesanspro-regular', normal, $asset-pipeline: true); 
</code></pre>

<h2>Cheers!</h2>

<p>I have prepared another article about Bourbon&rsquo;s mixins: <li><a href="/blog/2015/07/10/bourbon-mixins-02/">Bourbon: Mixins #02</a></li></p>

<p><img src="/images/bourbon-mixins/github-bourbon.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bourbon - Connoisseurs’s Choice Sass Mixins]]></title>
    <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/01/bourbon-sass-introduction/"/>
    <updated>2015-07-01T19:34:54+02:00</updated>
    <id>http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/07/01/bourbon-sass-introduction</id>
    <content type="html"><![CDATA[<p><img src="/images/bourbon-mixins/david_niven.jpg" width="600" height="360" title="" ></p>

<p><a href="http://bourbon.io/"><img src="/images/bourbon-mixins/bourbon-logo@2x.png" width="250" height="450"></a></p>

<h2>What’s ahead?</h2>

<ul>
<li><strong>Introduction</strong></li>
<li><a href="#setup"><strong>Setup</strong></a></li>
<li><a href="#mixins"><strong>Mixins Overview</strong></a></li>
<li><a href="#functions"><strong>Functions Overview</strong></a></li>
<li><a href="#addons"><strong>Add-ons</strong></a></li>
<li><a href="#conclusion"><strong>Conclusion</strong></a></li>
</ul>


<!--more-->


<h2>An Introduction</h2>

<p><a href="http://bourbon.io">Bourbon</a> is a top-notch Sass <strong>library for designers</strong>. It has a minimalistic approach and is serious about creating quality code that cares about <strong>semantics</strong>. I like it especially because it encourages best practices for developing great code that scales.</p>

<p>This gem helps <strong>designers</strong> to write their code faster and manages a lot of the nitty-gritty details like annoying <strong>vendor prefixes</strong>. It’s mixins often act as wrappers for outputting quality CSS but stay as vanilla as possible by being close to the original CSS syntax.</p>

<p>Big heavyweight frameworks like <a href="http://getbootstrap.com">Bootstrap</a> certainly have their charms. Developers like them because most design decisions are already made and reasonably decent looking websites come out pretty much prefabricated. Nothing wrong with that - given that you want to bootstrap your project without a designer who values <strong>semantic markup</strong>. I should mention though that once designers are involved, they might not be happy with that choice. Having to manually rip out unsemantic styles that are intermingled with your markup might give them ideas for putting funny stuff in your coffee.</p>

<h3>Worth Pointing Out</h3>

<ul>
<li>Bourbon is <strong>pure Sass &amp; platform agnostic</strong> -> works with any Sass project</li>
<li>Very close to actual CSS syntax -> Vanilla</li>
<li>Not tied to Ruby ( unlike Compass )</li>
<li>Includes awesome <strong>functions</strong></li>
<li>Outsources <strong>vendor prefixes</strong></li>
<li>It’s super lightweight</li>
<li>It’s <strong>Semantic</strong></li>
</ul>


<h2><a name='setup'></a>Setup</h2>

<ul>
<li>Fire up your terminal, change into your project’s directory and install Bourbon via RubyGems</li>
</ul>


<pre><code class="bash Terminal">$ gem install bourbon
</code></pre>

<ul>
<li>Change into your project’s stylesheets directory and generate your <strong>bourbon folder</strong></li>
</ul>


<pre><code class="bash Terminal">$ bourbon install
</code></pre>

<h6>This command generates a bourbon folder that contains the functions, mixins, helpers, settings, etc that you need. Do yourself a favor and don’t touch this folder. You will have a much better experience updating Bourbon in the future.</h6>

<h4>Screenshot</h4>

<p><img src="/images/bourbon-introduction/bourbon-install-generated-folder.png"></p>

<ul>
<li>You need to finish the setup by importing the generated sass files in your stylesheets. Import Bourbon on top of your <strong>application.sass</strong> file and make sure you only import other Sass files below.</li>
</ul>


<pre><code class="sass application.sass">@import 'bourbon/bourbon'
@import 'other-sass-partials-below'
</code></pre>

<h2><a name='mixins'></a>Mixins Overview</h2>

<p>Bourbon has a wide range of super useful mixins to speed up your work. In terms of design, it’s safe to say that they want to support your own design decisions without forcing a particular style on you. You are basically encouraged to mix your own awesomesauce. You can use these mixins as a stable and relatively neutral basis.
Here are a couple of mixins you might wanna check out first:</p>

<ul>
<li><strong>background-image</strong></li>
<li><strong>border-radius</strong></li>
<li><strong>box-sizing</strong></li>
<li><strong>linear-gradient</strong></li>
<li><strong>transitions</strong></li>
<li><strong>animations</strong></li>
<li><strong>font-face</strong></li>
<li><strong>button</strong></li>
<li><strong>triangle</strong></li>
<li><strong>retina-image</strong></li>
<li><strong>position</strong></li>
<li><strong>size</strong></li>
<li><strong>clearfix</strong></li>
<li><strong>inline-block</strong></li>
</ul>


<p>Learn more about individual Bourbon mixins in my other articles here:</p>

<p><a href="/blog/2015/07/05/bourbon-mixins/">Bourbon: Mixins #01</a></p>

<p><a href="/blog/2015/07/10/bourbon-mixins-02/">Bourbon: Mixins #02</a></p>

<h2><a name='functions'></a>Functions Overview</h2>

<p>Sass already has a ton of built-in functions, from manipulating strings to messing with opacity and colors. Bourbon adds a couple of selected enhancements and provides very handy Sass functions for a variety of use cases. Take a look a this selection:</p>

<ul>
<li><h3><strong>golden-ratio()</strong></h3></li>
</ul>


<p>Want to calculate the golden ratio of a certain number? (slowly depricated though)</p>

<ul>
<li><h3><strong>linear-gradient()</strong> &amp; <strong>radial-gradient()</strong></h3></li>
</ul>


<p>Need a linear- or radial-gradient for your background-image mixin?</p>

<p>You might already be familiar with Sass&rsquo;s built in functions for colors like <strong>lighten()</strong> and <strong>darken()</strong> which do exactly what you&rsquo;d expect.
Bourbon provides two additional awesome color functions for your convenience:</p>

<ul>
<li><h3><strong>tint()</strong> &amp; <strong>shade()</strong></h3></li>
</ul>


<p>The tint function changes a color by mixing it with <strong>white</strong>.
The shade function changes a color by mixing it with <strong>black</strong>.
Both functions take a <strong>color</strong> and <strong>percentage</strong> parameter to fine-tune the color mix.</p>

<ul>
<li><h3><strong>modular-scale()</strong></h3></li>
</ul>


<p>If you are into &ldquo;<em>more meaningful typography</em>&rdquo; and want to calculate a modular scale for varying font sizes that have some sort of numerical relationship, <strong>modular-scale()</strong> might become your new best friend.</p>

<ul>
<li><h3><strong>em()</strong></h3></li>
</ul>


<p>Calculates <strong>pixels to ems</strong> for you.</p>

<p>I have prepared a more detailed look at functions here:
<a href="/blog/2014/01/29/bourbon-functions/">Bourbon: Functions</a></p>

<h2><a name='addons'></a>Add-ons</h2>

<p>A small collection of useful variables:</p>

<ul>
<li><h3><strong>font-family variables</strong></h3>

<ul>
<li>font-family: $helvetica;</li>
<li>font-family: $georgia;</li>
<li>font-family: $lucida-grande;</li>
<li>font-family: $monospace;</li>
<li>font-family: $verdana;</li>
</ul>
</li>
</ul>


<p>Bourbon defines a set of default variables for font-families.
Instead of typing —</p>

<pre><code class="sass traditional way of defining fonts">font-family: "Helvetica Neue", Helvetica, Arial, sans-serif
</code></pre>

<p>— you just use one of the font-family variables.</p>

<pre><code class="sass font-family variable">font-family: $helvetica
</code></pre>

<ul>
<li><h3><strong>timing variables</strong></h3></li>
</ul>


<p>A mixin like <strong>transition</strong> has the following syntax:</p>

<pre><code class="sass">.some-element
  +transition(all 5s $ease-in-circ)

//  SCSS syntax
//  .some-element {
      @include transition(all 5s $ease-in-circ);
//  }
</code></pre>

<p>The last parameter defines it’s <strong>timing</strong>. You can fine-tune the transitional behaviour by providing one of 24 variables to control timing. The GIF belows illustrates the options best:</p>

<p><img src="/images/bourbon-mixins/timing-functions.gif"></p>

<h2><a name='conclusion'></a>Conclusion</h2>

<p>Do your future self and your colleagues a favor and give <a href="http://bourbon.io">Bourbon</a> a shot. This gem puts a high value on <strong>semantic markup</strong> while being <strong>lightweight &amp; simple</strong>. It will serve you well with your design and CSS architecture plus it aids cultivating best practices for creating superb code.</p>

<p><img src="/images/bourbon-mixins/LaForge.gif" width="600"></p>
]]></content>
  </entry>
  
</feed>
