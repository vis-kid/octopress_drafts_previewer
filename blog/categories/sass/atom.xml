<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sass | Drafts Previewer]]></title>
  <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/categories/sass/atom.xml" rel="self"/>
  <link href="http://vis-kid.github.io/octopress_drafts_previewer/"/>
  <updated>2015-09-11T00:05:13+02:00</updated>
  <id>http://vis-kid.github.io/octopress_drafts_previewer/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bourbon Neat: Semantically Responsible Responsive Grids]]></title>
    <link href="http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/09/09/bourbon-neat-semantic-responsive-grids/"/>
    <updated>2015-09-09T05:29:10+02:00</updated>
    <id>http://vis-kid.github.io/octopress_drafts_previewer/blog/2015/09/09/bourbon-neat-semantic-responsive-grids</id>
    <content type="html"><![CDATA[<p><img src="/images/bourbon-neat/bourbon-neat.jpg" width="450" height="260" title="" ></p>

<p><a href="http://neat.bourbon.io/"><img src="/images/bourbon-neat/Bourbon-Neat-Logo.png" width="250" height="450"></a></p>

<h2>Welcome to your new favorite tool</h2>

<p>We all know the myriad of frameworks that promise to deliver a stable frame for developing your designs. And certainly most succeed in that regard in one way or another. The relevant questions are in how many regards and to what degree:</p>

<ul>
<li>Will you be able to switch frameworks in the future easily?</li>
<li>Problems with cluttering your markup?</li>
<li>Are they suited for scaling projects?</li>
<li>Are they ridiculous in size?</li>
<li>Steep learning curve?</li>
<li>Generic look?</li>
</ul>


<p>If any of the issues above are remotly ringing a bell, I just want to assure you that such headaches are easily avoidable these days. It’s very rare to come across a project that balances it’s payoffs so well as <em>Bourbon Neat</em>. Why so? Here are a couple of good reasons:</p>

<ul>
<li>super lightweight</li>
<li>future-proof</li>
<li>easy to use</li>
<li>responsive</li>
<li>semantic</li>
<li>scalable</li>
<li>elegant</li>
</ul>


<p>Also it aims to provide you with options—not answers. What I like especially is that it isn’t a factory for generic, pre-defined styles. That way it aids the designer’s own design decisions without standing in the way.</p>

<h2>A word about semantics</h2>

<p>This is an important issue but I’ll make it short:
These ugly <em>presentation classes</em> and additional <em>“empty” wrapper divs</em> that you often find in similar libraries are ghosts from the past—at least they should be ghosted really. <em>Neat</em> plays a significant role in moving past these gnarly semantic habits. Nowadays you can easily write <em>clean, unobtrusive markup</em> and have all your grid styles cleanly separated in your stylesheets by including mixins. Busted!</p>

<p><img src="/images/bourbon-neat/Ghostbusters.gif" width="350"></p>

<h2>Neat Grids</h2>

<p>Why deal with a grid framework at all? Well, design is all about relationships and relationships are hard. Grids make them easier by helping you tie structures together more meaningfully and organized.</p>

<p>What I like most about grids is that they <em>simplify, reduce</em> and <em>stabilize</em>—in essence, they help trim the fat out of designs. Unless applied mindlessly of course, that’s exactly what Bourbon Neat helps achieve so effortlessly. Neat’s grids offer a lot of power in a small looking package that is easy to use. Hard to belive this library consists of only:</p>

<ul>
<li><h3>14 mixins</h3>

<ul>
<li>reset-layout-direction</li>
<li>direction-context</li>
<li>shift-in-context</li>
<li>display-context</li>
<li>outer-container</li>
<li>span-columns</li>
<li>reset-display</li>
<li>fill-parent</li>
<li>reset-all</li>
<li>omega</li>
<li>media</li>
<li>shift</li>
<li>pad</li>
<li>row</li>
</ul>
</li>
<li><h3>one function for setting breakpoints</h3>

<ul>
<li>new-breakpoint</li>
</ul>
</li>
<li><h3>and twelve variables for settings</h3>

<ul>
<li>default-layout-direction</li>
<li>visual-grid-opacity</li>
<li>border-box-sizing</li>
<li>visual-grid-index</li>
<li>visual-grid-color</li>
<li>disable-warnings</li>
<li>default-feature</li>
<li>grids-columns</li>
<li>max-width</li>
<li>visual-grid</li>
<li>column</li>
<li>gutter</li>
</ul>
</li>
</ul>


<p>Boom! That’s it!</p>

<h2>Responsive Grids</h2>

<p><img src="/images/bourbon-neat/grids.gif" width="750"></p>

<p>It’s becoming obvious that <em>change</em> and the <em>need for flexibility</em> are constant future-proof necessities. Incorporating media queries should be smooth and easily manageable but they can quickly become a mess if not handled with care.</p>

<p>Bourbon Neat encourages a <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"><em>DRY</em></a> approach for handling your breakpoints with it’s <strong>new-breakpoint</strong> function. Save breakpoints in variables and resuse them wherever you need. Changing a bunch of media queries in one place is hard to beat.</p>

<p>Given that you’re using intelligent tools, it’s definitely a joy working with grids. This framework does a great job in planning for developer happiness—long- and short-term. To me there is but one word which describes best what Bourbon Neat has provided me with when I work with grids: <em>Zen</em>. Hard to find better developer / designer happiness than that imho.</p>

<p>In the next article I’ll take a closer, more technical look at how to use this fantastic gem.
Have fun playing with Neat, I know you will!</p>

<p><img src="/images/bourbon-neat/ping-pong-grids.gif" width="450"></p>
]]></content>
  </entry>
  
</feed>
